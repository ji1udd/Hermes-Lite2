// megafunction wizard: %LPM_DIVIDE%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: LPM_DIVIDE 

// ============================================================
// File Name: div11_8.v
// Megafunction Name(s):
// 			LPM_DIVIDE
//
// Simulation Library Files(s):
// 			lpm
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 16.1.2 Build 203 01/18/2017 SJ Lite Edition
// ************************************************************


//Copyright (C) 2017  Intel Corporation. All rights reserved.
//Your use of Intel Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Intel Program License 
//Subscription Agreement, the Intel Quartus Prime License Agreement,
//the Intel MegaCore Function License Agreement, or other 
//applicable license agreement, including, without limitation, 
//that your use is for the sole purpose of programming logic 
//devices manufactured by Intel and sold by Intel or its 
//authorized distributors.  Please refer to the applicable 
//agreement for further details.


//lpm_divide DEVICE_FAMILY="Cyclone IV E" LPM_DREPRESENTATION="UNSIGNED" LPM_NREPRESENTATION="UNSIGNED" LPM_PIPELINE=11 LPM_REMAINDERPOSITIVE="TRUE" LPM_WIDTHD=8 LPM_WIDTHN=11 MAXIMIZE_SPEED=5 clock denom numer quotient remain
//VERSION_BEGIN 16.1 cbx_cycloneii 2017:01:18:18:20:37:SJ cbx_lpm_abs 2017:01:18:18:20:37:SJ cbx_lpm_add_sub 2017:01:18:18:20:37:SJ cbx_lpm_divide 2017:01:18:18:20:37:SJ cbx_mgl 2017:01:18:18:27:06:SJ cbx_nadder 2017:01:18:18:20:37:SJ cbx_stratix 2017:01:18:18:20:37:SJ cbx_stratixii 2017:01:18:18:20:37:SJ cbx_util_mgl 2017:01:18:18:20:37:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



//sign_div_unsign DEN_REPRESENTATION="UNSIGNED" DEN_WIDTH=8 LPM_PIPELINE=11 MAXIMIZE_SPEED=5 NUM_REPRESENTATION="UNSIGNED" NUM_WIDTH=11 SKIP_BITS=0 clock denominator numerator quotient remainder
//VERSION_BEGIN 16.1 cbx_cycloneii 2017:01:18:18:20:37:SJ cbx_lpm_abs 2017:01:18:18:20:37:SJ cbx_lpm_add_sub 2017:01:18:18:20:37:SJ cbx_lpm_divide 2017:01:18:18:20:37:SJ cbx_mgl 2017:01:18:18:27:06:SJ cbx_nadder 2017:01:18:18:20:37:SJ cbx_stratix 2017:01:18:18:20:37:SJ cbx_stratixii 2017:01:18:18:20:37:SJ cbx_util_mgl 2017:01:18:18:20:37:SJ  VERSION_END


//alt_u_div DEVICE_FAMILY="Cyclone IV E" LPM_PIPELINE=11 MAXIMIZE_SPEED=5 SKIP_BITS=0 WIDTH_D=8 WIDTH_N=11 WIDTH_Q=11 WIDTH_R=8 clock denominator numerator quotient remainder
//VERSION_BEGIN 16.1 cbx_cycloneii 2017:01:18:18:20:37:SJ cbx_lpm_abs 2017:01:18:18:20:37:SJ cbx_lpm_add_sub 2017:01:18:18:20:37:SJ cbx_lpm_divide 2017:01:18:18:20:37:SJ cbx_mgl 2017:01:18:18:27:06:SJ cbx_nadder 2017:01:18:18:20:37:SJ cbx_stratix 2017:01:18:18:20:37:SJ cbx_stratixii 2017:01:18:18:20:37:SJ cbx_util_mgl 2017:01:18:18:20:37:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=1 cout dataa datab result
//VERSION_BEGIN 16.1 cbx_cycloneii 2017:01:18:18:20:37:SJ cbx_lpm_add_sub 2017:01:18:18:20:37:SJ cbx_mgl 2017:01:18:18:27:06:SJ cbx_nadder 2017:01:18:18:20:37:SJ cbx_stratix 2017:01:18:18:20:37:SJ cbx_stratixii 2017:01:18:18:20:37:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  div11_8_add_sub
	( 
	cout,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	output   cout;
	input   [0:0]  dataa;
	input   [0:0]  datab;
	output   [0:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   [0:0]  dataa;
	tri0   [0:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [0:0]  carry_eqn;
	wire  cin_wire;
	wire  [0:0]  datab_node;
	wire  [0:0]  sum_eqn;

	assign
		carry_eqn = {((dataa[0] & datab_node[0]) | ((dataa[0] | datab_node[0]) & cin_wire))},
		cin_wire = 1'b1,
		cout = carry_eqn[0],
		datab_node = (~ datab),
		result = sum_eqn,
		sum_eqn = {((dataa[0] ^ datab_node[0]) ^ cin_wire)};
endmodule //div11_8_add_sub


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=2 cout dataa datab result
//VERSION_BEGIN 16.1 cbx_cycloneii 2017:01:18:18:20:37:SJ cbx_lpm_add_sub 2017:01:18:18:20:37:SJ cbx_mgl 2017:01:18:18:27:06:SJ cbx_nadder 2017:01:18:18:20:37:SJ cbx_stratix 2017:01:18:18:20:37:SJ cbx_stratixii 2017:01:18:18:20:37:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  div11_8_add_sub1
	( 
	cout,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	output   cout;
	input   [1:0]  dataa;
	input   [1:0]  datab;
	output   [1:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   [1:0]  dataa;
	tri0   [1:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [1:0]  carry_eqn;
	wire  cin_wire;
	wire  [1:0]  datab_node;
	wire  [1:0]  sum_eqn;

	assign
		carry_eqn = {((dataa[1] & datab_node[1]) | ((dataa[1] | datab_node[1]) & carry_eqn[0])), ((dataa[0] & datab_node[0]) | ((dataa[0] | datab_node[0]) & cin_wire))},
		cin_wire = 1'b1,
		cout = carry_eqn[1],
		datab_node = (~ datab),
		result = sum_eqn,
		sum_eqn = {((dataa[1] ^ datab_node[1]) ^ carry_eqn[0]), ((dataa[0] ^ datab_node[0]) ^ cin_wire)};
endmodule //div11_8_add_sub1


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=9 cout dataa datab result
//VERSION_BEGIN 16.1 cbx_cycloneii 2017:01:18:18:20:37:SJ cbx_lpm_add_sub 2017:01:18:18:20:37:SJ cbx_mgl 2017:01:18:18:27:06:SJ cbx_nadder 2017:01:18:18:20:37:SJ cbx_stratix 2017:01:18:18:20:37:SJ cbx_stratixii 2017:01:18:18:20:37:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=3 cout dataa datab result
//VERSION_BEGIN 16.1 cbx_cycloneii 2017:01:18:18:20:37:SJ cbx_lpm_add_sub 2017:01:18:18:20:37:SJ cbx_mgl 2017:01:18:18:27:06:SJ cbx_nadder 2017:01:18:18:20:37:SJ cbx_stratix 2017:01:18:18:20:37:SJ cbx_stratixii 2017:01:18:18:20:37:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=4 cout dataa datab result
//VERSION_BEGIN 16.1 cbx_cycloneii 2017:01:18:18:20:37:SJ cbx_lpm_add_sub 2017:01:18:18:20:37:SJ cbx_mgl 2017:01:18:18:27:06:SJ cbx_nadder 2017:01:18:18:20:37:SJ cbx_stratix 2017:01:18:18:20:37:SJ cbx_stratixii 2017:01:18:18:20:37:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=5 cout dataa datab result
//VERSION_BEGIN 16.1 cbx_cycloneii 2017:01:18:18:20:37:SJ cbx_lpm_add_sub 2017:01:18:18:20:37:SJ cbx_mgl 2017:01:18:18:27:06:SJ cbx_nadder 2017:01:18:18:20:37:SJ cbx_stratix 2017:01:18:18:20:37:SJ cbx_stratixii 2017:01:18:18:20:37:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=6 cout dataa datab result
//VERSION_BEGIN 16.1 cbx_cycloneii 2017:01:18:18:20:37:SJ cbx_lpm_add_sub 2017:01:18:18:20:37:SJ cbx_mgl 2017:01:18:18:27:06:SJ cbx_nadder 2017:01:18:18:20:37:SJ cbx_stratix 2017:01:18:18:20:37:SJ cbx_stratixii 2017:01:18:18:20:37:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=7 cout dataa datab result
//VERSION_BEGIN 16.1 cbx_cycloneii 2017:01:18:18:20:37:SJ cbx_lpm_add_sub 2017:01:18:18:20:37:SJ cbx_mgl 2017:01:18:18:27:06:SJ cbx_nadder 2017:01:18:18:20:37:SJ cbx_stratix 2017:01:18:18:20:37:SJ cbx_stratixii 2017:01:18:18:20:37:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=8 cout dataa datab result
//VERSION_BEGIN 16.1 cbx_cycloneii 2017:01:18:18:20:37:SJ cbx_lpm_add_sub 2017:01:18:18:20:37:SJ cbx_mgl 2017:01:18:18:27:06:SJ cbx_nadder 2017:01:18:18:20:37:SJ cbx_stratix 2017:01:18:18:20:37:SJ cbx_stratixii 2017:01:18:18:20:37:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=9 cout dataa datab result
//VERSION_BEGIN 16.1 cbx_cycloneii 2017:01:18:18:20:37:SJ cbx_lpm_add_sub 2017:01:18:18:20:37:SJ cbx_mgl 2017:01:18:18:27:06:SJ cbx_nadder 2017:01:18:18:20:37:SJ cbx_stratix 2017:01:18:18:20:37:SJ cbx_stratixii 2017:01:18:18:20:37:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=9 cout dataa datab result
//VERSION_BEGIN 16.1 cbx_cycloneii 2017:01:18:18:20:37:SJ cbx_lpm_add_sub 2017:01:18:18:20:37:SJ cbx_mgl 2017:01:18:18:27:06:SJ cbx_nadder 2017:01:18:18:20:37:SJ cbx_stratix 2017:01:18:18:20:37:SJ cbx_stratixii 2017:01:18:18:20:37:SJ  VERSION_END

//synthesis_resources = lut 69 reg 429 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"{-to DFFQuotient[0]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[1]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[2]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[3]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[4]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[5]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[6]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[7]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[8]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[9]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[10]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[11]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[12]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[13]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[14]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[15]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[16]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[17]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[18]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[19]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[20]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[21]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[22]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[23]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[24]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[25]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[26]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[27]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[28]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[29]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[30]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[31]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[32]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[33]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[34]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[35]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[36]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[37]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[38]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[39]} POWER_UP_LEVEL=HIGH;",
		"{-to DFFQuotient[40]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[41]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[42]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[43]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[44]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[45]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[46]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[47]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[48]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[49]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[50]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[51]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[52]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[53]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[54]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[55]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[56]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[57]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[58]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[59]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[60]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[61]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[62]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[63]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[64]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[65]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[66]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[67]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[68]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[69]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[70]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[71]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[72]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[73]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[74]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[75]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[76]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[77]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[78]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[79]} POWER_UP_LEVEL=HIGH;",
		"{-to DFFQuotient[80]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[81]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[82]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[83]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[84]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[85]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[86]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[87]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[88]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[89]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[90]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[91]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[92]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[93]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[94]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[95]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[96]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[97]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[98]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[99]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[100]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[101]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[102]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[103]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[104]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[105]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[106]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[107]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[108]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[109]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[110]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[111]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[112]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[113]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[114]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[115]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[116]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[117]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[118]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[119]} POWER_UP_LEVEL=LOW;",
		"{-to DFFQuotient[120]} POWER_UP_LEVEL=LOW"} *)
module  div11_8_alt_u_div
	( 
	clock,
	denominator,
	numerator,
	quotient,
	remainder) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   [7:0]  denominator;
	input   [10:0]  numerator;
	output   [10:0]  quotient;
	output   [7:0]  remainder;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=HIGH"} *)
	reg	[87:0]	DFFDenominator;
	reg	[120:0]	DFFNumerator;
	wire	[120:0]	wire_DFFQuotient_d;
	reg	[120:0]	DFFQuotient;
	reg	[98:0]	DFFStage;
	wire  wire_add_sub_0_cout;
	wire  [0:0]   wire_add_sub_0_result;
	wire  wire_add_sub_1_cout;
	wire  [1:0]   wire_add_sub_1_result;
	wire	[9:0]	wire_add_sub_10_result_int;
	wire	wire_add_sub_10_cout;
	wire	[8:0]	wire_add_sub_10_dataa;
	wire	[8:0]	wire_add_sub_10_datab;
	wire	[8:0]	wire_add_sub_10_result;
	wire	[3:0]	wire_add_sub_2_result_int;
	wire	wire_add_sub_2_cout;
	wire	[2:0]	wire_add_sub_2_dataa;
	wire	[2:0]	wire_add_sub_2_datab;
	wire	[2:0]	wire_add_sub_2_result;
	wire	[4:0]	wire_add_sub_3_result_int;
	wire	wire_add_sub_3_cout;
	wire	[3:0]	wire_add_sub_3_dataa;
	wire	[3:0]	wire_add_sub_3_datab;
	wire	[3:0]	wire_add_sub_3_result;
	wire	[5:0]	wire_add_sub_4_result_int;
	wire	wire_add_sub_4_cout;
	wire	[4:0]	wire_add_sub_4_dataa;
	wire	[4:0]	wire_add_sub_4_datab;
	wire	[4:0]	wire_add_sub_4_result;
	wire	[6:0]	wire_add_sub_5_result_int;
	wire	wire_add_sub_5_cout;
	wire	[5:0]	wire_add_sub_5_dataa;
	wire	[5:0]	wire_add_sub_5_datab;
	wire	[5:0]	wire_add_sub_5_result;
	wire	[7:0]	wire_add_sub_6_result_int;
	wire	wire_add_sub_6_cout;
	wire	[6:0]	wire_add_sub_6_dataa;
	wire	[6:0]	wire_add_sub_6_datab;
	wire	[6:0]	wire_add_sub_6_result;
	wire	[8:0]	wire_add_sub_7_result_int;
	wire	wire_add_sub_7_cout;
	wire	[7:0]	wire_add_sub_7_dataa;
	wire	[7:0]	wire_add_sub_7_datab;
	wire	[7:0]	wire_add_sub_7_result;
	wire	[9:0]	wire_add_sub_8_result_int;
	wire	wire_add_sub_8_cout;
	wire	[8:0]	wire_add_sub_8_dataa;
	wire	[8:0]	wire_add_sub_8_datab;
	wire	[8:0]	wire_add_sub_8_result;
	wire	[9:0]	wire_add_sub_9_result_int;
	wire	wire_add_sub_9_cout;
	wire	[8:0]	wire_add_sub_9_dataa;
	wire	[8:0]	wire_add_sub_9_datab;
	wire	[8:0]	wire_add_sub_9_result;
	wire aclr;
	wire clk_en;
	wire  [107:0]  DenominatorIn;
	wire  [107:0]  DenominatorIn_tmp;
	wire  gnd_wire;
	wire  [131:0]  nose;
	wire  [131:0]  NumeratorIn;
	wire  [131:0]  NumeratorIn_tmp;
	wire  [98:0]  prestg;
	wire  [10:0]  quotient_tmp;
	wire  [95:0]  sel;
	wire  [131:0]  selnose;
	wire  [107:0]  StageIn;
	wire  [107:0]  StageIn_tmp;
	wire  [98:0]  StageOut;
	wire  vcc_wire;

	// synopsys translate_off
	initial
		DFFDenominator = {88{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator <= {88{1'b1}};
		else if  (clk_en == 1'b1)   DFFDenominator <= {DFFDenominator[79:0], denominator};
	// synopsys translate_off
	initial
		DFFNumerator = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFNumerator <= 121'b0;
		else if  (clk_en == 1'b1)   DFFNumerator <= {DFFNumerator[109:0], numerator};
	// synopsys translate_off
	initial
		DFFQuotient[0:0] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[0:0] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[0:0] <= wire_DFFQuotient_d[0:0];
	// synopsys translate_off
	initial
		DFFQuotient[1:1] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[1:1] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[1:1] <= wire_DFFQuotient_d[1:1];
	// synopsys translate_off
	initial
		DFFQuotient[2:2] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[2:2] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[2:2] <= wire_DFFQuotient_d[2:2];
	// synopsys translate_off
	initial
		DFFQuotient[3:3] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[3:3] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[3:3] <= wire_DFFQuotient_d[3:3];
	// synopsys translate_off
	initial
		DFFQuotient[4:4] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[4:4] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[4:4] <= wire_DFFQuotient_d[4:4];
	// synopsys translate_off
	initial
		DFFQuotient[5:5] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[5:5] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[5:5] <= wire_DFFQuotient_d[5:5];
	// synopsys translate_off
	initial
		DFFQuotient[6:6] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[6:6] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[6:6] <= wire_DFFQuotient_d[6:6];
	// synopsys translate_off
	initial
		DFFQuotient[7:7] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[7:7] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[7:7] <= wire_DFFQuotient_d[7:7];
	// synopsys translate_off
	initial
		DFFQuotient[8:8] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[8:8] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[8:8] <= wire_DFFQuotient_d[8:8];
	// synopsys translate_off
	initial
		DFFQuotient[9:9] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[9:9] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[9:9] <= wire_DFFQuotient_d[9:9];
	// synopsys translate_off
	initial
		DFFQuotient[10:10] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[10:10] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[10:10] <= wire_DFFQuotient_d[10:10];
	// synopsys translate_off
	initial
		DFFQuotient[11:11] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[11:11] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[11:11] <= wire_DFFQuotient_d[11:11];
	// synopsys translate_off
	initial
		DFFQuotient[12:12] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[12:12] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[12:12] <= wire_DFFQuotient_d[12:12];
	// synopsys translate_off
	initial
		DFFQuotient[13:13] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[13:13] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[13:13] <= wire_DFFQuotient_d[13:13];
	// synopsys translate_off
	initial
		DFFQuotient[14:14] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[14:14] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[14:14] <= wire_DFFQuotient_d[14:14];
	// synopsys translate_off
	initial
		DFFQuotient[15:15] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[15:15] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[15:15] <= wire_DFFQuotient_d[15:15];
	// synopsys translate_off
	initial
		DFFQuotient[16:16] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[16:16] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[16:16] <= wire_DFFQuotient_d[16:16];
	// synopsys translate_off
	initial
		DFFQuotient[17:17] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[17:17] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[17:17] <= wire_DFFQuotient_d[17:17];
	// synopsys translate_off
	initial
		DFFQuotient[18:18] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[18:18] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[18:18] <= wire_DFFQuotient_d[18:18];
	// synopsys translate_off
	initial
		DFFQuotient[19:19] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[19:19] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[19:19] <= wire_DFFQuotient_d[19:19];
	// synopsys translate_off
	initial
		DFFQuotient[20:20] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[20:20] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[20:20] <= wire_DFFQuotient_d[20:20];
	// synopsys translate_off
	initial
		DFFQuotient[21:21] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[21:21] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[21:21] <= wire_DFFQuotient_d[21:21];
	// synopsys translate_off
	initial
		DFFQuotient[22:22] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[22:22] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[22:22] <= wire_DFFQuotient_d[22:22];
	// synopsys translate_off
	initial
		DFFQuotient[23:23] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[23:23] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[23:23] <= wire_DFFQuotient_d[23:23];
	// synopsys translate_off
	initial
		DFFQuotient[24:24] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[24:24] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[24:24] <= wire_DFFQuotient_d[24:24];
	// synopsys translate_off
	initial
		DFFQuotient[25:25] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[25:25] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[25:25] <= wire_DFFQuotient_d[25:25];
	// synopsys translate_off
	initial
		DFFQuotient[26:26] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[26:26] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[26:26] <= wire_DFFQuotient_d[26:26];
	// synopsys translate_off
	initial
		DFFQuotient[27:27] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[27:27] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[27:27] <= wire_DFFQuotient_d[27:27];
	// synopsys translate_off
	initial
		DFFQuotient[28:28] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[28:28] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[28:28] <= wire_DFFQuotient_d[28:28];
	// synopsys translate_off
	initial
		DFFQuotient[29:29] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[29:29] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[29:29] <= wire_DFFQuotient_d[29:29];
	// synopsys translate_off
	initial
		DFFQuotient[30:30] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[30:30] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[30:30] <= wire_DFFQuotient_d[30:30];
	// synopsys translate_off
	initial
		DFFQuotient[31:31] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[31:31] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[31:31] <= wire_DFFQuotient_d[31:31];
	// synopsys translate_off
	initial
		DFFQuotient[32:32] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[32:32] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[32:32] <= wire_DFFQuotient_d[32:32];
	// synopsys translate_off
	initial
		DFFQuotient[33:33] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[33:33] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[33:33] <= wire_DFFQuotient_d[33:33];
	// synopsys translate_off
	initial
		DFFQuotient[34:34] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[34:34] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[34:34] <= wire_DFFQuotient_d[34:34];
	// synopsys translate_off
	initial
		DFFQuotient[35:35] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[35:35] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[35:35] <= wire_DFFQuotient_d[35:35];
	// synopsys translate_off
	initial
		DFFQuotient[36:36] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[36:36] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[36:36] <= wire_DFFQuotient_d[36:36];
	// synopsys translate_off
	initial
		DFFQuotient[37:37] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[37:37] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[37:37] <= wire_DFFQuotient_d[37:37];
	// synopsys translate_off
	initial
		DFFQuotient[38:38] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[38:38] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[38:38] <= wire_DFFQuotient_d[38:38];
	// synopsys translate_off
	initial
		DFFQuotient[39:39] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[39:39] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[39:39] <= wire_DFFQuotient_d[39:39];
	// synopsys translate_off
	initial
		DFFQuotient[40:40] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[40:40] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[40:40] <= wire_DFFQuotient_d[40:40];
	// synopsys translate_off
	initial
		DFFQuotient[41:41] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[41:41] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[41:41] <= wire_DFFQuotient_d[41:41];
	// synopsys translate_off
	initial
		DFFQuotient[42:42] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[42:42] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[42:42] <= wire_DFFQuotient_d[42:42];
	// synopsys translate_off
	initial
		DFFQuotient[43:43] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[43:43] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[43:43] <= wire_DFFQuotient_d[43:43];
	// synopsys translate_off
	initial
		DFFQuotient[44:44] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[44:44] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[44:44] <= wire_DFFQuotient_d[44:44];
	// synopsys translate_off
	initial
		DFFQuotient[45:45] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[45:45] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[45:45] <= wire_DFFQuotient_d[45:45];
	// synopsys translate_off
	initial
		DFFQuotient[46:46] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[46:46] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[46:46] <= wire_DFFQuotient_d[46:46];
	// synopsys translate_off
	initial
		DFFQuotient[47:47] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[47:47] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[47:47] <= wire_DFFQuotient_d[47:47];
	// synopsys translate_off
	initial
		DFFQuotient[48:48] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[48:48] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[48:48] <= wire_DFFQuotient_d[48:48];
	// synopsys translate_off
	initial
		DFFQuotient[49:49] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[49:49] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[49:49] <= wire_DFFQuotient_d[49:49];
	// synopsys translate_off
	initial
		DFFQuotient[50:50] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[50:50] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[50:50] <= wire_DFFQuotient_d[50:50];
	// synopsys translate_off
	initial
		DFFQuotient[51:51] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[51:51] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[51:51] <= wire_DFFQuotient_d[51:51];
	// synopsys translate_off
	initial
		DFFQuotient[52:52] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[52:52] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[52:52] <= wire_DFFQuotient_d[52:52];
	// synopsys translate_off
	initial
		DFFQuotient[53:53] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[53:53] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[53:53] <= wire_DFFQuotient_d[53:53];
	// synopsys translate_off
	initial
		DFFQuotient[54:54] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[54:54] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[54:54] <= wire_DFFQuotient_d[54:54];
	// synopsys translate_off
	initial
		DFFQuotient[55:55] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[55:55] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[55:55] <= wire_DFFQuotient_d[55:55];
	// synopsys translate_off
	initial
		DFFQuotient[56:56] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[56:56] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[56:56] <= wire_DFFQuotient_d[56:56];
	// synopsys translate_off
	initial
		DFFQuotient[57:57] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[57:57] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[57:57] <= wire_DFFQuotient_d[57:57];
	// synopsys translate_off
	initial
		DFFQuotient[58:58] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[58:58] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[58:58] <= wire_DFFQuotient_d[58:58];
	// synopsys translate_off
	initial
		DFFQuotient[59:59] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[59:59] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[59:59] <= wire_DFFQuotient_d[59:59];
	// synopsys translate_off
	initial
		DFFQuotient[60:60] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[60:60] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[60:60] <= wire_DFFQuotient_d[60:60];
	// synopsys translate_off
	initial
		DFFQuotient[61:61] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[61:61] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[61:61] <= wire_DFFQuotient_d[61:61];
	// synopsys translate_off
	initial
		DFFQuotient[62:62] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[62:62] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[62:62] <= wire_DFFQuotient_d[62:62];
	// synopsys translate_off
	initial
		DFFQuotient[63:63] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[63:63] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[63:63] <= wire_DFFQuotient_d[63:63];
	// synopsys translate_off
	initial
		DFFQuotient[64:64] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[64:64] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[64:64] <= wire_DFFQuotient_d[64:64];
	// synopsys translate_off
	initial
		DFFQuotient[65:65] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[65:65] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[65:65] <= wire_DFFQuotient_d[65:65];
	// synopsys translate_off
	initial
		DFFQuotient[66:66] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[66:66] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[66:66] <= wire_DFFQuotient_d[66:66];
	// synopsys translate_off
	initial
		DFFQuotient[67:67] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[67:67] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[67:67] <= wire_DFFQuotient_d[67:67];
	// synopsys translate_off
	initial
		DFFQuotient[68:68] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[68:68] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[68:68] <= wire_DFFQuotient_d[68:68];
	// synopsys translate_off
	initial
		DFFQuotient[69:69] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[69:69] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[69:69] <= wire_DFFQuotient_d[69:69];
	// synopsys translate_off
	initial
		DFFQuotient[70:70] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[70:70] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[70:70] <= wire_DFFQuotient_d[70:70];
	// synopsys translate_off
	initial
		DFFQuotient[71:71] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[71:71] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[71:71] <= wire_DFFQuotient_d[71:71];
	// synopsys translate_off
	initial
		DFFQuotient[72:72] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[72:72] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[72:72] <= wire_DFFQuotient_d[72:72];
	// synopsys translate_off
	initial
		DFFQuotient[73:73] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[73:73] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[73:73] <= wire_DFFQuotient_d[73:73];
	// synopsys translate_off
	initial
		DFFQuotient[74:74] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[74:74] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[74:74] <= wire_DFFQuotient_d[74:74];
	// synopsys translate_off
	initial
		DFFQuotient[75:75] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[75:75] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[75:75] <= wire_DFFQuotient_d[75:75];
	// synopsys translate_off
	initial
		DFFQuotient[76:76] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[76:76] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[76:76] <= wire_DFFQuotient_d[76:76];
	// synopsys translate_off
	initial
		DFFQuotient[77:77] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[77:77] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[77:77] <= wire_DFFQuotient_d[77:77];
	// synopsys translate_off
	initial
		DFFQuotient[78:78] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[78:78] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[78:78] <= wire_DFFQuotient_d[78:78];
	// synopsys translate_off
	initial
		DFFQuotient[79:79] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[79:79] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[79:79] <= wire_DFFQuotient_d[79:79];
	// synopsys translate_off
	initial
		DFFQuotient[80:80] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[80:80] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[80:80] <= wire_DFFQuotient_d[80:80];
	// synopsys translate_off
	initial
		DFFQuotient[81:81] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[81:81] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[81:81] <= wire_DFFQuotient_d[81:81];
	// synopsys translate_off
	initial
		DFFQuotient[82:82] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[82:82] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[82:82] <= wire_DFFQuotient_d[82:82];
	// synopsys translate_off
	initial
		DFFQuotient[83:83] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[83:83] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[83:83] <= wire_DFFQuotient_d[83:83];
	// synopsys translate_off
	initial
		DFFQuotient[84:84] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[84:84] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[84:84] <= wire_DFFQuotient_d[84:84];
	// synopsys translate_off
	initial
		DFFQuotient[85:85] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[85:85] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[85:85] <= wire_DFFQuotient_d[85:85];
	// synopsys translate_off
	initial
		DFFQuotient[86:86] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[86:86] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[86:86] <= wire_DFFQuotient_d[86:86];
	// synopsys translate_off
	initial
		DFFQuotient[87:87] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[87:87] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[87:87] <= wire_DFFQuotient_d[87:87];
	// synopsys translate_off
	initial
		DFFQuotient[88:88] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[88:88] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[88:88] <= wire_DFFQuotient_d[88:88];
	// synopsys translate_off
	initial
		DFFQuotient[89:89] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[89:89] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[89:89] <= wire_DFFQuotient_d[89:89];
	// synopsys translate_off
	initial
		DFFQuotient[90:90] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[90:90] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[90:90] <= wire_DFFQuotient_d[90:90];
	// synopsys translate_off
	initial
		DFFQuotient[91:91] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[91:91] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[91:91] <= wire_DFFQuotient_d[91:91];
	// synopsys translate_off
	initial
		DFFQuotient[92:92] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[92:92] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[92:92] <= wire_DFFQuotient_d[92:92];
	// synopsys translate_off
	initial
		DFFQuotient[93:93] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[93:93] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[93:93] <= wire_DFFQuotient_d[93:93];
	// synopsys translate_off
	initial
		DFFQuotient[94:94] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[94:94] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[94:94] <= wire_DFFQuotient_d[94:94];
	// synopsys translate_off
	initial
		DFFQuotient[95:95] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[95:95] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[95:95] <= wire_DFFQuotient_d[95:95];
	// synopsys translate_off
	initial
		DFFQuotient[96:96] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[96:96] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[96:96] <= wire_DFFQuotient_d[96:96];
	// synopsys translate_off
	initial
		DFFQuotient[97:97] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[97:97] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[97:97] <= wire_DFFQuotient_d[97:97];
	// synopsys translate_off
	initial
		DFFQuotient[98:98] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[98:98] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[98:98] <= wire_DFFQuotient_d[98:98];
	// synopsys translate_off
	initial
		DFFQuotient[99:99] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[99:99] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[99:99] <= wire_DFFQuotient_d[99:99];
	// synopsys translate_off
	initial
		DFFQuotient[100:100] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[100:100] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[100:100] <= wire_DFFQuotient_d[100:100];
	// synopsys translate_off
	initial
		DFFQuotient[101:101] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[101:101] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[101:101] <= wire_DFFQuotient_d[101:101];
	// synopsys translate_off
	initial
		DFFQuotient[102:102] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[102:102] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[102:102] <= wire_DFFQuotient_d[102:102];
	// synopsys translate_off
	initial
		DFFQuotient[103:103] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[103:103] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[103:103] <= wire_DFFQuotient_d[103:103];
	// synopsys translate_off
	initial
		DFFQuotient[104:104] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[104:104] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[104:104] <= wire_DFFQuotient_d[104:104];
	// synopsys translate_off
	initial
		DFFQuotient[105:105] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[105:105] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[105:105] <= wire_DFFQuotient_d[105:105];
	// synopsys translate_off
	initial
		DFFQuotient[106:106] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[106:106] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[106:106] <= wire_DFFQuotient_d[106:106];
	// synopsys translate_off
	initial
		DFFQuotient[107:107] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[107:107] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[107:107] <= wire_DFFQuotient_d[107:107];
	// synopsys translate_off
	initial
		DFFQuotient[108:108] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[108:108] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[108:108] <= wire_DFFQuotient_d[108:108];
	// synopsys translate_off
	initial
		DFFQuotient[109:109] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[109:109] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[109:109] <= wire_DFFQuotient_d[109:109];
	// synopsys translate_off
	initial
		DFFQuotient[110:110] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[110:110] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[110:110] <= wire_DFFQuotient_d[110:110];
	// synopsys translate_off
	initial
		DFFQuotient[111:111] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[111:111] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[111:111] <= wire_DFFQuotient_d[111:111];
	// synopsys translate_off
	initial
		DFFQuotient[112:112] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[112:112] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[112:112] <= wire_DFFQuotient_d[112:112];
	// synopsys translate_off
	initial
		DFFQuotient[113:113] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[113:113] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[113:113] <= wire_DFFQuotient_d[113:113];
	// synopsys translate_off
	initial
		DFFQuotient[114:114] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[114:114] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[114:114] <= wire_DFFQuotient_d[114:114];
	// synopsys translate_off
	initial
		DFFQuotient[115:115] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[115:115] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[115:115] <= wire_DFFQuotient_d[115:115];
	// synopsys translate_off
	initial
		DFFQuotient[116:116] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[116:116] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[116:116] <= wire_DFFQuotient_d[116:116];
	// synopsys translate_off
	initial
		DFFQuotient[117:117] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[117:117] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[117:117] <= wire_DFFQuotient_d[117:117];
	// synopsys translate_off
	initial
		DFFQuotient[118:118] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[118:118] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[118:118] <= wire_DFFQuotient_d[118:118];
	// synopsys translate_off
	initial
		DFFQuotient[119:119] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[119:119] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[119:119] <= wire_DFFQuotient_d[119:119];
	// synopsys translate_off
	initial
		DFFQuotient[120:120] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[120:120] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[120:120] <= wire_DFFQuotient_d[120:120];
	assign
		wire_DFFQuotient_d = {DFFQuotient[109:100], (~ selnose[120]), DFFQuotient[98:90], (~ selnose[108]), vcc_wire, DFFQuotient[87:80], (~ selnose[96]), {2{vcc_wire}}, DFFQuotient[76:70], (~ selnose[84]), {3{vcc_wire}}, DFFQuotient[65:60], (~ selnose[72]), {4{vcc_wire}}, DFFQuotient[54:50], (~ selnose[60]), {5{vcc_wire}}, DFFQuotient[43:40], (~ selnose[48]), {6{vcc_wire}}, DFFQuotient[32:30], (~ selnose[36]), {7{vcc_wire}}, DFFQuotient[21:20], (~ selnose[24]), {8{vcc_wire}}, DFFQuotient[10], (~ selnose[12]), {9{vcc_wire}}, (~ selnose[0]), {10{vcc_wire}}};
	// synopsys translate_off
	initial
		DFFStage = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFStage <= 99'b0;
		else if  (clk_en == 1'b1)   DFFStage <= {StageOut[98:0]};
	div11_8_add_sub   add_sub_0
	( 
	.cout(wire_add_sub_0_cout),
	.dataa(NumeratorIn[10]),
	.datab(DenominatorIn[0]),
	.result(wire_add_sub_0_result));
	div11_8_add_sub1   add_sub_1
	( 
	.cout(wire_add_sub_1_cout),
	.dataa({StageIn[9], NumeratorIn[20]}),
	.datab(DenominatorIn[10:9]),
	.result(wire_add_sub_1_result));
	assign
		wire_add_sub_10_result_int = wire_add_sub_10_dataa - wire_add_sub_10_datab;
	assign
		wire_add_sub_10_result = wire_add_sub_10_result_int[8:0],
		wire_add_sub_10_cout = ~wire_add_sub_10_result_int[9:9];
	assign
		wire_add_sub_10_dataa = {StageIn[97:90], NumeratorIn[110]},
		wire_add_sub_10_datab = DenominatorIn[98:90];
	assign
		wire_add_sub_2_result_int = wire_add_sub_2_dataa - wire_add_sub_2_datab;
	assign
		wire_add_sub_2_result = wire_add_sub_2_result_int[2:0],
		wire_add_sub_2_cout = ~wire_add_sub_2_result_int[3:3];
	assign
		wire_add_sub_2_dataa = {StageIn[19:18], NumeratorIn[30]},
		wire_add_sub_2_datab = DenominatorIn[20:18];
	assign
		wire_add_sub_3_result_int = wire_add_sub_3_dataa - wire_add_sub_3_datab;
	assign
		wire_add_sub_3_result = wire_add_sub_3_result_int[3:0],
		wire_add_sub_3_cout = ~wire_add_sub_3_result_int[4:4];
	assign
		wire_add_sub_3_dataa = {StageIn[29:27], NumeratorIn[40]},
		wire_add_sub_3_datab = DenominatorIn[30:27];
	assign
		wire_add_sub_4_result_int = wire_add_sub_4_dataa - wire_add_sub_4_datab;
	assign
		wire_add_sub_4_result = wire_add_sub_4_result_int[4:0],
		wire_add_sub_4_cout = ~wire_add_sub_4_result_int[5:5];
	assign
		wire_add_sub_4_dataa = {StageIn[39:36], NumeratorIn[50]},
		wire_add_sub_4_datab = DenominatorIn[40:36];
	assign
		wire_add_sub_5_result_int = wire_add_sub_5_dataa - wire_add_sub_5_datab;
	assign
		wire_add_sub_5_result = wire_add_sub_5_result_int[5:0],
		wire_add_sub_5_cout = ~wire_add_sub_5_result_int[6:6];
	assign
		wire_add_sub_5_dataa = {StageIn[49:45], NumeratorIn[60]},
		wire_add_sub_5_datab = DenominatorIn[50:45];
	assign
		wire_add_sub_6_result_int = wire_add_sub_6_dataa - wire_add_sub_6_datab;
	assign
		wire_add_sub_6_result = wire_add_sub_6_result_int[6:0],
		wire_add_sub_6_cout = ~wire_add_sub_6_result_int[7:7];
	assign
		wire_add_sub_6_dataa = {StageIn[59:54], NumeratorIn[70]},
		wire_add_sub_6_datab = DenominatorIn[60:54];
	assign
		wire_add_sub_7_result_int = wire_add_sub_7_dataa - wire_add_sub_7_datab;
	assign
		wire_add_sub_7_result = wire_add_sub_7_result_int[7:0],
		wire_add_sub_7_cout = ~wire_add_sub_7_result_int[8:8];
	assign
		wire_add_sub_7_dataa = {StageIn[69:63], NumeratorIn[80]},
		wire_add_sub_7_datab = DenominatorIn[70:63];
	assign
		wire_add_sub_8_result_int = wire_add_sub_8_dataa - wire_add_sub_8_datab;
	assign
		wire_add_sub_8_result = wire_add_sub_8_result_int[8:0],
		wire_add_sub_8_cout = ~wire_add_sub_8_result_int[9:9];
	assign
		wire_add_sub_8_dataa = {StageIn[79:72], NumeratorIn[90]},
		wire_add_sub_8_datab = DenominatorIn[80:72];
	assign
		wire_add_sub_9_result_int = wire_add_sub_9_dataa - wire_add_sub_9_datab;
	assign
		wire_add_sub_9_result = wire_add_sub_9_result_int[8:0],
		wire_add_sub_9_cout = ~wire_add_sub_9_result_int[9:9];
	assign
		wire_add_sub_9_dataa = {StageIn[88:81], NumeratorIn[100]},
		wire_add_sub_9_datab = DenominatorIn[89:81];
	assign
		aclr = 1'b0,
		clk_en = 1'b1,
		DenominatorIn = DenominatorIn_tmp,
		DenominatorIn_tmp = {{gnd_wire, DFFDenominator[87:80]}, {gnd_wire, DFFDenominator[79:72]}, {gnd_wire, DFFDenominator[71:64]}, {gnd_wire, DFFDenominator[63:56]}, {gnd_wire, DFFDenominator[55:48]}, {gnd_wire, DFFDenominator[47:40]}, {gnd_wire, DFFDenominator[39:32]}, {gnd_wire, DFFDenominator[31:24]}, {gnd_wire, DFFDenominator[23:16]}, {gnd_wire, DFFDenominator[15:8]}, {gnd_wire, DFFDenominator[7:0]}, {gnd_wire, denominator}},
		gnd_wire = 1'b0,
		nose = {{11{1'b0}}, wire_add_sub_10_cout, {11{1'b0}}, wire_add_sub_9_cout, {11{1'b0}}, wire_add_sub_8_cout, {11{1'b0}}, wire_add_sub_7_cout, {11{1'b0}}, wire_add_sub_6_cout, {11{1'b0}}, wire_add_sub_5_cout, {11{1'b0}}, wire_add_sub_4_cout, {11{1'b0}}, wire_add_sub_3_cout, {11{1'b0}}, wire_add_sub_2_cout, {11{1'b0}}, wire_add_sub_1_cout, {11{1'b0}}, wire_add_sub_0_cout},
		NumeratorIn = NumeratorIn_tmp,
		NumeratorIn_tmp = {DFFNumerator[120:0], numerator},
		prestg = {wire_add_sub_10_result, wire_add_sub_9_result, wire_add_sub_8_result, {1{1'b0}}, wire_add_sub_7_result, {2{1'b0}}, wire_add_sub_6_result, {3{1'b0}}, wire_add_sub_5_result, {4{1'b0}}, wire_add_sub_4_result, {5{1'b0}}, wire_add_sub_3_result, {6{1'b0}}, wire_add_sub_2_result, {7{1'b0}}, wire_add_sub_1_result, {8{1'b0}}, wire_add_sub_0_result},
		quotient = quotient_tmp,
		quotient_tmp = {DFFQuotient[120:110]},
		remainder = StageIn[106:99],
		sel = {gnd_wire, (sel[95] | DenominatorIn[106]), (sel[94] | DenominatorIn[105]), (sel[93] | DenominatorIn[104]), (sel[92] | DenominatorIn[103]), (sel[91] | DenominatorIn[102]), (sel[90] | DenominatorIn[101]), (sel[89] | DenominatorIn[100]), gnd_wire, (sel[87] | DenominatorIn[97]), (sel[86] | DenominatorIn[96]), (sel[85] | DenominatorIn[95]), (sel[84] | DenominatorIn[94]), (sel[83] | DenominatorIn[93]), (sel[82] | DenominatorIn[92]), (sel[81] | DenominatorIn[91]), gnd_wire, (sel[79] | DenominatorIn[88]), (sel[78] | DenominatorIn[87]), (sel[77] | DenominatorIn[86]), (sel[76] | DenominatorIn[85]), (sel[75] | DenominatorIn[84]), (sel[74] | DenominatorIn[83]), (sel[73] | DenominatorIn[82]), gnd_wire, (sel[71] | DenominatorIn[79]), (sel[70] | DenominatorIn[78]), (sel[69] | DenominatorIn[77]), (sel[68] | DenominatorIn[76]), (sel[67] | DenominatorIn[75]), (sel[66] | DenominatorIn[74]), (sel[65] | DenominatorIn[73]), gnd_wire, (sel[63] | DenominatorIn[70]), (sel[62] | DenominatorIn[69]), (sel[61] | DenominatorIn[68]), (sel[60] | DenominatorIn[67]), (sel[59] | DenominatorIn[66]), (sel[58] | DenominatorIn[65]), (sel[57] | DenominatorIn[64]), gnd_wire, (sel[55] | DenominatorIn[61]), (sel[54] | DenominatorIn[60]), (sel[53] | DenominatorIn[59]), (sel[52] | DenominatorIn[58]), (sel[51] | DenominatorIn[57]), (sel[50] | DenominatorIn[56]), (sel[49] | DenominatorIn[55]), gnd_wire, (sel[47] | DenominatorIn[52]), (sel[46] | DenominatorIn[51]), (sel[45] | DenominatorIn[50]), (sel[44] | DenominatorIn[49]), (sel[43] | DenominatorIn[48]), (sel[42] | DenominatorIn[47]), (sel[41] | DenominatorIn[46]), gnd_wire, (sel[39] | DenominatorIn[43]), (sel[38] | DenominatorIn[42]), (sel[37] | DenominatorIn[41]), (sel[36] | DenominatorIn[40]), (sel[35] | DenominatorIn[39]), (sel[34] | DenominatorIn[38]), (sel[33] | DenominatorIn[37]), gnd_wire, (sel[31] | DenominatorIn[34]), (sel[30] | DenominatorIn[33]), (sel[29] | DenominatorIn[32]), (sel[28] | DenominatorIn[31]), (sel[27] | DenominatorIn[30]), (sel[26] | DenominatorIn[29]), (sel[25] | DenominatorIn[28]
), gnd_wire, (sel[23] | DenominatorIn[25]), (sel[22] | DenominatorIn[24]), (sel[21] | DenominatorIn[23]), (sel[20] | DenominatorIn[22]), (sel[19] | DenominatorIn[21]), (sel[18] | DenominatorIn[20]), (sel[17] | DenominatorIn[19]), gnd_wire, (sel[15] | DenominatorIn[16]), (sel[14] | DenominatorIn[15]), (sel[13] | DenominatorIn[14]), (sel[12] | DenominatorIn[13]), (sel[11] | DenominatorIn[12]), (sel[10] | DenominatorIn[11]), (sel[9] | DenominatorIn[10]), gnd_wire, (sel[7] | DenominatorIn[7]), (sel[6] | DenominatorIn[6]), (sel[5] | DenominatorIn[5]), (sel[4] | DenominatorIn[4]), (sel[3] | DenominatorIn[3]), (sel[2] | DenominatorIn[2]), (sel[1] | DenominatorIn[1])},
		selnose = {(~ nose[131]), (~ nose[130]), (~ nose[129]), ((~ nose[128]) | sel[95]), ((~ nose[127]) | sel[94]), ((~ nose[126]) | sel[93]), ((~ nose[125]) | sel[92]), ((~ nose[124]) | sel[91]), ((~ nose[123]) | sel[90]), ((~ nose[122]) | sel[89]), ((~ nose[121]) | sel[88]), (~ nose[120]), (~ nose[119]), (~ nose[118]), ((~ nose[117]) | sel[87]), ((~ nose[116]) | sel[86]), ((~ nose[115]) | sel[85]), ((~ nose[114]) | sel[84]), ((~ nose[113]) | sel[83]), ((~ nose[112]) | sel[82]), ((~ nose[111]) | sel[81]), ((~ nose[110]) | sel[80]), (~ nose[109]), (~ nose[108]), (~ nose[107]), ((~ nose[106]) | sel[79]), ((~ nose[105]) | sel[78]), ((~ nose[104]) | sel[77]), ((~ nose[103]) | sel[76]), ((~ nose[102]) | sel[75]), ((~ nose[101]) | sel[74]), ((~ nose[100]) | sel[73]), ((~ nose[99]) | sel[72]), (~ nose[98]), (~ nose[97]), (~ nose[96]), ((~ nose[95]) | sel[71]), ((~ nose[94]) | sel[70]), ((~ nose[93]) | sel[69]), ((~ nose[92]) | sel[68]), ((~ nose[91]) | sel[67]), ((~ nose[90]) | sel[66]), ((~ nose[89]) | sel[65]), ((~ nose[88]) | sel[64]), (~ nose[87]), (~ nose[86]), (~ nose[85]), ((~ nose[84]) | sel[63]), ((~ nose[83]) | sel[62]), ((~ nose[82]) | sel[61]), ((~ nose[81]) | sel[60]), ((~ nose[80]) | sel[59]), ((~ nose[79]) | sel[58]), ((~ nose[78]) | sel[57]), ((~ nose[77]) | sel[56]), (~ nose[76]), (~ nose[75]), (~ nose[74]), ((~ nose[73]) | sel[55]), ((~ nose[72]) | sel[54]), ((~ nose[71]) | sel[53]), ((~ nose[70]) | sel[52]), ((~ nose[69]) | sel[51]), ((~ nose[68]) | sel[50]), ((~ nose[67]) | sel[49]), ((~ nose[66]) | sel[48]), (~ nose[65]), (~ nose[64]), (~ nose[63]), ((~ nose[62]) | sel[47]), ((~ nose[61]) | sel[46]), ((~ nose[60]) | sel[45]), ((~ nose[59]) | sel[44]), ((~ nose[58]) | sel[43]), ((~ nose[57]) | sel[42]), ((~ nose[56]) | sel[41]), ((~ nose[55]) | sel[40]), (~ nose[54]), (~ nose[53]), (~ nose[52]), ((~ nose[51]) | sel[39]), ((~ nose[50]) | sel[38]), ((~ nose[49]) | sel[37]), ((~ nose[48]) | sel[36]), ((~ nose[47]) | sel[35]), ((~ nose[46]) | sel[34]), ((~ nose[45]) | sel[33]), ((~ nose[44]) | sel[32]), (~ nose[43]
), (~ nose[42]), (~ nose[41]), ((~ nose[40]) | sel[31]), ((~ nose[39]) | sel[30]), ((~ nose[38]) | sel[29]), ((~ nose[37]) | sel[28]), ((~ nose[36]) | sel[27]), ((~ nose[35]) | sel[26]), ((~ nose[34]) | sel[25]), ((~ nose[33]) | sel[24]), (~ nose[32]), (~ nose[31]), (~ nose[30]), ((~ nose[29]) | sel[23]), ((~ nose[28]) | sel[22]), ((~ nose[27]) | sel[21]), ((~ nose[26]) | sel[20]), ((~ nose[25]) | sel[19]), ((~ nose[24]) | sel[18]), ((~ nose[23]) | sel[17]), ((~ nose[22]) | sel[16]), (~ nose[21]), (~ nose[20]), (~ nose[19]), ((~ nose[18]) | sel[15]), ((~ nose[17]) | sel[14]), ((~ nose[16]) | sel[13]), ((~ nose[15]) | sel[12]), ((~ nose[14]) | sel[11]), ((~ nose[13]) | sel[10]), ((~ nose[12]) | sel[9]), ((~ nose[11]) | sel[8]), (~ nose[10]), (~ nose[9]), (~ nose[8]), ((~ nose[7]) | sel[7]), ((~ nose[6]) | sel[6]), ((~ nose[5]) | sel[5]), ((~ nose[4]) | sel[4]), ((~ nose[3]) | sel[3]), ((~ nose[2]) | sel[2]), ((~ nose[1]) | sel[1]), ((~ nose[0]) | sel[0])},
		StageIn = StageIn_tmp,
		StageIn_tmp = {DFFStage[98:0], {9{1'b0}}},
		StageOut = {(({StageIn[97:90], NumeratorIn[110]} & {9{selnose[120]}}) | (prestg[98:90] & {9{(~ selnose[120])}})), (({StageIn[88:81], NumeratorIn[100]} & {9{selnose[108]}}) | (prestg[89:81] & {9{(~ selnose[108])}})), (({StageIn[79:72], NumeratorIn[90]} & {9{selnose[96]}}) | (prestg[80:72] & {9{(~ selnose[96])}})), (({StageIn[70:63], NumeratorIn[80]} & {9{selnose[84]}}) | (prestg[71:63] & {9{(~ selnose[84])}})), (({StageIn[61:54], NumeratorIn[70]} & {9{selnose[72]}}) | (prestg[62:54] & {9{(~ selnose[72])}})), (({StageIn[52:45], NumeratorIn[60]} & {9{selnose[60]}}) | (prestg[53:45] & {9{(~ selnose[60])}})), (({StageIn[43:36], NumeratorIn[50]} & {9{selnose[48]}}) | (prestg[44:36] & {9{(~ selnose[48])}})), (({StageIn[34:27], NumeratorIn[40]} & {9{selnose[36]}}) | (prestg[35:27] & {9{(~ selnose[36])}})), (({StageIn[25:18], NumeratorIn[30]} & {9{selnose[24]}}) | (prestg[26:18] & {9{(~ selnose[24])}})), (({StageIn[16:9], NumeratorIn[20]} & {9{selnose[12]}}) | (prestg[17:9] & {9{(~ selnose[12])}})), (({StageIn[7:0], NumeratorIn[10]} & {9{selnose[0]}}) | (prestg[8:0] & {9{(~ selnose[0])}}))},
		vcc_wire = 1'b1;
endmodule //div11_8_alt_u_div

//synthesis_resources = lut 69 reg 429 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  div11_8_sign_div_unsign
	( 
	clock,
	denominator,
	numerator,
	quotient,
	remainder) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   [7:0]  denominator;
	input   [10:0]  numerator;
	output   [10:0]  quotient;
	output   [7:0]  remainder;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [10:0]   wire_divider_quotient;
	wire  [7:0]   wire_divider_remainder;
	wire  [10:0]  norm_num;
	wire  [10:0]  protect_quotient;
	wire  [7:0]  protect_remainder;

	div11_8_alt_u_div   divider
	( 
	.clock(clock),
	.denominator(denominator),
	.numerator(norm_num),
	.quotient(wire_divider_quotient),
	.remainder(wire_divider_remainder));
	assign
		norm_num = numerator,
		protect_quotient = wire_divider_quotient,
		protect_remainder = wire_divider_remainder,
		quotient = protect_quotient,
		remainder = protect_remainder;
endmodule //div11_8_sign_div_unsign

//synthesis_resources = lut 69 reg 429 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  div11_8_lpm_divide
	( 
	clock,
	denom,
	numer,
	quotient,
	remain) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   [7:0]  denom;
	input   [10:0]  numer;
	output   [10:0]  quotient;
	output   [7:0]  remain;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [10:0]   wire_divider_quotient;
	wire  [7:0]   wire_divider_remainder;
	wire  [10:0]  numer_tmp;

	div11_8_sign_div_unsign   divider
	( 
	.clock(clock),
	.denominator(denom),
	.numerator(numer_tmp),
	.quotient(wire_divider_quotient),
	.remainder(wire_divider_remainder));
	assign
		numer_tmp = numer,
		quotient = wire_divider_quotient,
		remain = wire_divider_remainder;
endmodule //div11_8_lpm_divide
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module div11_8 (
	clock,
	denom,
	numer,
	quotient,
	remain)/* synthesis synthesis_clearbox = 1 */;

	input	  clock;
	input	[7:0]  denom;
	input	[10:0]  numer;
	output	[10:0]  quotient;
	output	[7:0]  remain;

	wire [10:0] sub_wire0;
	wire [7:0] sub_wire1;
	wire [10:0] quotient = sub_wire0[10:0];
	wire [7:0] remain = sub_wire1[7:0];

	div11_8_lpm_divide	div11_8_lpm_divide_component (
				.clock (clock),
				.denom (denom),
				.numer (numer),
				.quotient (sub_wire0),
				.remain (sub_wire1));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Cyclone IV E"
// Retrieval info: PRIVATE: PRIVATE_LPM_REMAINDERPOSITIVE STRING "TRUE"
// Retrieval info: PRIVATE: PRIVATE_MAXIMIZE_SPEED NUMERIC "5"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "1"
// Retrieval info: PRIVATE: USING_PIPELINE NUMERIC "1"
// Retrieval info: PRIVATE: VERSION_NUMBER NUMERIC "2"
// Retrieval info: PRIVATE: new_diagram STRING "1"
// Retrieval info: LIBRARY: lpm lpm.lpm_components.all
// Retrieval info: CONSTANT: LPM_DREPRESENTATION STRING "UNSIGNED"
// Retrieval info: CONSTANT: LPM_HINT STRING "MAXIMIZE_SPEED=5,LPM_REMAINDERPOSITIVE=TRUE"
// Retrieval info: CONSTANT: LPM_NREPRESENTATION STRING "UNSIGNED"
// Retrieval info: CONSTANT: LPM_PIPELINE NUMERIC "11"
// Retrieval info: CONSTANT: LPM_TYPE STRING "LPM_DIVIDE"
// Retrieval info: CONSTANT: LPM_WIDTHD NUMERIC "8"
// Retrieval info: CONSTANT: LPM_WIDTHN NUMERIC "11"
// Retrieval info: USED_PORT: clock 0 0 0 0 INPUT NODEFVAL "clock"
// Retrieval info: USED_PORT: denom 0 0 8 0 INPUT NODEFVAL "denom[7..0]"
// Retrieval info: USED_PORT: numer 0 0 11 0 INPUT NODEFVAL "numer[10..0]"
// Retrieval info: USED_PORT: quotient 0 0 11 0 OUTPUT NODEFVAL "quotient[10..0]"
// Retrieval info: USED_PORT: remain 0 0 8 0 OUTPUT NODEFVAL "remain[7..0]"
// Retrieval info: CONNECT: @clock 0 0 0 0 clock 0 0 0 0
// Retrieval info: CONNECT: @denom 0 0 8 0 denom 0 0 8 0
// Retrieval info: CONNECT: @numer 0 0 11 0 numer 0 0 11 0
// Retrieval info: CONNECT: quotient 0 0 11 0 @quotient 0 0 11 0
// Retrieval info: CONNECT: remain 0 0 8 0 @remain 0 0 8 0
// Retrieval info: GEN_FILE: TYPE_NORMAL div11_8.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL div11_8.inc FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL div11_8.cmp FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL div11_8.bsf FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL div11_8_inst.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL div11_8_bb.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL div11_8_syn.v TRUE
// Retrieval info: LIB_FILE: lpm
