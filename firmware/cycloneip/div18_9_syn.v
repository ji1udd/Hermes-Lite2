// megafunction wizard: %LPM_DIVIDE%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: LPM_DIVIDE 

// ============================================================
// File Name: div18_9.v
// Megafunction Name(s):
// 			LPM_DIVIDE
//
// Simulation Library Files(s):
// 			lpm
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 16.1.2 Build 203 01/18/2017 SJ Lite Edition
// ************************************************************


//Copyright (C) 2017  Intel Corporation. All rights reserved.
//Your use of Intel Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Intel Program License 
//Subscription Agreement, the Intel Quartus Prime License Agreement,
//the Intel MegaCore Function License Agreement, or other 
//applicable license agreement, including, without limitation, 
//that your use is for the sole purpose of programming logic 
//devices manufactured by Intel and sold by Intel or its 
//authorized distributors.  Please refer to the applicable 
//agreement for further details.


//lpm_divide DEVICE_FAMILY="Cyclone IV E" LPM_DREPRESENTATION="UNSIGNED" LPM_NREPRESENTATION="UNSIGNED" LPM_PIPELINE=18 LPM_REMAINDERPOSITIVE="TRUE" LPM_WIDTHD=9 LPM_WIDTHN=18 clock denom numer quotient remain
//VERSION_BEGIN 16.1 cbx_cycloneii 2017:01:18:18:20:37:SJ cbx_lpm_abs 2017:01:18:18:20:37:SJ cbx_lpm_add_sub 2017:01:18:18:20:37:SJ cbx_lpm_divide 2017:01:18:18:20:37:SJ cbx_mgl 2017:01:18:18:27:06:SJ cbx_nadder 2017:01:18:18:20:37:SJ cbx_stratix 2017:01:18:18:20:37:SJ cbx_stratixii 2017:01:18:18:20:37:SJ cbx_util_mgl 2017:01:18:18:20:37:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



//sign_div_unsign DEN_REPRESENTATION="UNSIGNED" DEN_WIDTH=9 LPM_PIPELINE=18 MAXIMIZE_SPEED=5 NUM_REPRESENTATION="UNSIGNED" NUM_WIDTH=18 SKIP_BITS=0 clock denominator numerator quotient remainder
//VERSION_BEGIN 16.1 cbx_cycloneii 2017:01:18:18:20:37:SJ cbx_lpm_abs 2017:01:18:18:20:37:SJ cbx_lpm_add_sub 2017:01:18:18:20:37:SJ cbx_lpm_divide 2017:01:18:18:20:37:SJ cbx_mgl 2017:01:18:18:27:06:SJ cbx_nadder 2017:01:18:18:20:37:SJ cbx_stratix 2017:01:18:18:20:37:SJ cbx_stratixii 2017:01:18:18:20:37:SJ cbx_util_mgl 2017:01:18:18:20:37:SJ  VERSION_END


//alt_u_div DEVICE_FAMILY="Cyclone IV E" LPM_PIPELINE=18 MAXIMIZE_SPEED=5 SKIP_BITS=0 WIDTH_D=9 WIDTH_N=18 WIDTH_Q=18 WIDTH_R=9 clock denominator numerator quotient remainder
//VERSION_BEGIN 16.1 cbx_cycloneii 2017:01:18:18:20:37:SJ cbx_lpm_abs 2017:01:18:18:20:37:SJ cbx_lpm_add_sub 2017:01:18:18:20:37:SJ cbx_lpm_divide 2017:01:18:18:20:37:SJ cbx_mgl 2017:01:18:18:27:06:SJ cbx_nadder 2017:01:18:18:20:37:SJ cbx_stratix 2017:01:18:18:20:37:SJ cbx_stratixii 2017:01:18:18:20:37:SJ cbx_util_mgl 2017:01:18:18:20:37:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=1 cout dataa datab result
//VERSION_BEGIN 16.1 cbx_cycloneii 2017:01:18:18:20:37:SJ cbx_lpm_add_sub 2017:01:18:18:20:37:SJ cbx_mgl 2017:01:18:18:27:06:SJ cbx_nadder 2017:01:18:18:20:37:SJ cbx_stratix 2017:01:18:18:20:37:SJ cbx_stratixii 2017:01:18:18:20:37:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  div18_9_add_sub
	( 
	cout,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	output   cout;
	input   [0:0]  dataa;
	input   [0:0]  datab;
	output   [0:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   [0:0]  dataa;
	tri0   [0:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [0:0]  carry_eqn;
	wire  cin_wire;
	wire  [0:0]  datab_node;
	wire  [0:0]  sum_eqn;

	assign
		carry_eqn = {((dataa[0] & datab_node[0]) | ((dataa[0] | datab_node[0]) & cin_wire))},
		cin_wire = 1'b1,
		cout = carry_eqn[0],
		datab_node = (~ datab),
		result = sum_eqn,
		sum_eqn = {((dataa[0] ^ datab_node[0]) ^ cin_wire)};
endmodule //div18_9_add_sub


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=2 cout dataa datab result
//VERSION_BEGIN 16.1 cbx_cycloneii 2017:01:18:18:20:37:SJ cbx_lpm_add_sub 2017:01:18:18:20:37:SJ cbx_mgl 2017:01:18:18:27:06:SJ cbx_nadder 2017:01:18:18:20:37:SJ cbx_stratix 2017:01:18:18:20:37:SJ cbx_stratixii 2017:01:18:18:20:37:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  div18_9_add_sub1
	( 
	cout,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	output   cout;
	input   [1:0]  dataa;
	input   [1:0]  datab;
	output   [1:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   [1:0]  dataa;
	tri0   [1:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [1:0]  carry_eqn;
	wire  cin_wire;
	wire  [1:0]  datab_node;
	wire  [1:0]  sum_eqn;

	assign
		carry_eqn = {((dataa[1] & datab_node[1]) | ((dataa[1] | datab_node[1]) & carry_eqn[0])), ((dataa[0] & datab_node[0]) | ((dataa[0] | datab_node[0]) & cin_wire))},
		cin_wire = 1'b1,
		cout = carry_eqn[1],
		datab_node = (~ datab),
		result = sum_eqn,
		sum_eqn = {((dataa[1] ^ datab_node[1]) ^ carry_eqn[0]), ((dataa[0] ^ datab_node[0]) ^ cin_wire)};
endmodule //div18_9_add_sub1


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=10 cout dataa datab result
//VERSION_BEGIN 16.1 cbx_cycloneii 2017:01:18:18:20:37:SJ cbx_lpm_add_sub 2017:01:18:18:20:37:SJ cbx_mgl 2017:01:18:18:27:06:SJ cbx_nadder 2017:01:18:18:20:37:SJ cbx_stratix 2017:01:18:18:20:37:SJ cbx_stratixii 2017:01:18:18:20:37:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=10 cout dataa datab result
//VERSION_BEGIN 16.1 cbx_cycloneii 2017:01:18:18:20:37:SJ cbx_lpm_add_sub 2017:01:18:18:20:37:SJ cbx_mgl 2017:01:18:18:27:06:SJ cbx_nadder 2017:01:18:18:20:37:SJ cbx_stratix 2017:01:18:18:20:37:SJ cbx_stratixii 2017:01:18:18:20:37:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=10 cout dataa datab result
//VERSION_BEGIN 16.1 cbx_cycloneii 2017:01:18:18:20:37:SJ cbx_lpm_add_sub 2017:01:18:18:20:37:SJ cbx_mgl 2017:01:18:18:27:06:SJ cbx_nadder 2017:01:18:18:20:37:SJ cbx_stratix 2017:01:18:18:20:37:SJ cbx_stratixii 2017:01:18:18:20:37:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=10 cout dataa datab result
//VERSION_BEGIN 16.1 cbx_cycloneii 2017:01:18:18:20:37:SJ cbx_lpm_add_sub 2017:01:18:18:20:37:SJ cbx_mgl 2017:01:18:18:27:06:SJ cbx_nadder 2017:01:18:18:20:37:SJ cbx_stratix 2017:01:18:18:20:37:SJ cbx_stratixii 2017:01:18:18:20:37:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=10 cout dataa datab result
//VERSION_BEGIN 16.1 cbx_cycloneii 2017:01:18:18:20:37:SJ cbx_lpm_add_sub 2017:01:18:18:20:37:SJ cbx_mgl 2017:01:18:18:27:06:SJ cbx_nadder 2017:01:18:18:20:37:SJ cbx_stratix 2017:01:18:18:20:37:SJ cbx_stratixii 2017:01:18:18:20:37:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=10 cout dataa datab result
//VERSION_BEGIN 16.1 cbx_cycloneii 2017:01:18:18:20:37:SJ cbx_lpm_add_sub 2017:01:18:18:20:37:SJ cbx_mgl 2017:01:18:18:27:06:SJ cbx_nadder 2017:01:18:18:20:37:SJ cbx_stratix 2017:01:18:18:20:37:SJ cbx_stratixii 2017:01:18:18:20:37:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=10 cout dataa datab result
//VERSION_BEGIN 16.1 cbx_cycloneii 2017:01:18:18:20:37:SJ cbx_lpm_add_sub 2017:01:18:18:20:37:SJ cbx_mgl 2017:01:18:18:27:06:SJ cbx_nadder 2017:01:18:18:20:37:SJ cbx_stratix 2017:01:18:18:20:37:SJ cbx_stratixii 2017:01:18:18:20:37:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=10 cout dataa datab result
//VERSION_BEGIN 16.1 cbx_cycloneii 2017:01:18:18:20:37:SJ cbx_lpm_add_sub 2017:01:18:18:20:37:SJ cbx_mgl 2017:01:18:18:27:06:SJ cbx_nadder 2017:01:18:18:20:37:SJ cbx_stratix 2017:01:18:18:20:37:SJ cbx_stratixii 2017:01:18:18:20:37:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=3 cout dataa datab result
//VERSION_BEGIN 16.1 cbx_cycloneii 2017:01:18:18:20:37:SJ cbx_lpm_add_sub 2017:01:18:18:20:37:SJ cbx_mgl 2017:01:18:18:27:06:SJ cbx_nadder 2017:01:18:18:20:37:SJ cbx_stratix 2017:01:18:18:20:37:SJ cbx_stratixii 2017:01:18:18:20:37:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=4 cout dataa datab result
//VERSION_BEGIN 16.1 cbx_cycloneii 2017:01:18:18:20:37:SJ cbx_lpm_add_sub 2017:01:18:18:20:37:SJ cbx_mgl 2017:01:18:18:27:06:SJ cbx_nadder 2017:01:18:18:20:37:SJ cbx_stratix 2017:01:18:18:20:37:SJ cbx_stratixii 2017:01:18:18:20:37:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=5 cout dataa datab result
//VERSION_BEGIN 16.1 cbx_cycloneii 2017:01:18:18:20:37:SJ cbx_lpm_add_sub 2017:01:18:18:20:37:SJ cbx_mgl 2017:01:18:18:27:06:SJ cbx_nadder 2017:01:18:18:20:37:SJ cbx_stratix 2017:01:18:18:20:37:SJ cbx_stratixii 2017:01:18:18:20:37:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=6 cout dataa datab result
//VERSION_BEGIN 16.1 cbx_cycloneii 2017:01:18:18:20:37:SJ cbx_lpm_add_sub 2017:01:18:18:20:37:SJ cbx_mgl 2017:01:18:18:27:06:SJ cbx_nadder 2017:01:18:18:20:37:SJ cbx_stratix 2017:01:18:18:20:37:SJ cbx_stratixii 2017:01:18:18:20:37:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=7 cout dataa datab result
//VERSION_BEGIN 16.1 cbx_cycloneii 2017:01:18:18:20:37:SJ cbx_lpm_add_sub 2017:01:18:18:20:37:SJ cbx_mgl 2017:01:18:18:27:06:SJ cbx_nadder 2017:01:18:18:20:37:SJ cbx_stratix 2017:01:18:18:20:37:SJ cbx_stratixii 2017:01:18:18:20:37:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=8 cout dataa datab result
//VERSION_BEGIN 16.1 cbx_cycloneii 2017:01:18:18:20:37:SJ cbx_lpm_add_sub 2017:01:18:18:20:37:SJ cbx_mgl 2017:01:18:18:27:06:SJ cbx_nadder 2017:01:18:18:20:37:SJ cbx_stratix 2017:01:18:18:20:37:SJ cbx_stratixii 2017:01:18:18:20:37:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=9 cout dataa datab result
//VERSION_BEGIN 16.1 cbx_cycloneii 2017:01:18:18:20:37:SJ cbx_lpm_add_sub 2017:01:18:18:20:37:SJ cbx_mgl 2017:01:18:18:27:06:SJ cbx_nadder 2017:01:18:18:20:37:SJ cbx_stratix 2017:01:18:18:20:37:SJ cbx_stratixii 2017:01:18:18:20:37:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=10 cout dataa datab result
//VERSION_BEGIN 16.1 cbx_cycloneii 2017:01:18:18:20:37:SJ cbx_lpm_add_sub 2017:01:18:18:20:37:SJ cbx_mgl 2017:01:18:18:27:06:SJ cbx_nadder 2017:01:18:18:20:37:SJ cbx_stratix 2017:01:18:18:20:37:SJ cbx_stratixii 2017:01:18:18:20:37:SJ  VERSION_END

//synthesis_resources = lut 148 reg 990 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"{-to DFFQuotient[0]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[1]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[2]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[3]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[4]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[5]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[6]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[7]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[8]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[9]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[10]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[11]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[12]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[13]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[14]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[15]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[16]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[17]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[18]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[19]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[20]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[21]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[22]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[23]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[24]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[25]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[26]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[27]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[28]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[29]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[30]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[31]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[32]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[33]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[34]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[35]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[36]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[37]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[38]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[39]} POWER_UP_LEVEL=HIGH;",
		"{-to DFFQuotient[40]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[41]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[42]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[43]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[44]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[45]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[46]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[47]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[48]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[49]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[50]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[51]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[52]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[53]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[54]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[55]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[56]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[57]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[58]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[59]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[60]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[61]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[62]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[63]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[64]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[65]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[66]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[67]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[68]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[69]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[70]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[71]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[72]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[73]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[74]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[75]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[76]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[77]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[78]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[79]} POWER_UP_LEVEL=HIGH;",
		"{-to DFFQuotient[80]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[81]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[82]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[83]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[84]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[85]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[86]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[87]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[88]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[89]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[90]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[91]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[92]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[93]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[94]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[95]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[96]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[97]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[98]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[99]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[100]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[101]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[102]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[103]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[104]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[105]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[106]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[107]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[108]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[109]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[110]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[111]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[112]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[113]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[114]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[115]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[116]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[117]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[118]} POWER_UP_LEVEL=HIGH;",
		"{-to DFFQuotient[119]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[120]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[121]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[122]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[123]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[124]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[125]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[126]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[127]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[128]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[129]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[130]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[131]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[132]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[133]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[134]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[135]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[136]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[137]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[138]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[139]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[140]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[141]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[142]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[143]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[144]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[145]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[146]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[147]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[148]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[149]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[150]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[151]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[152]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[153]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[154]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[155]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[156]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[157]} POWER_UP_LEVEL=LOW;",
		"{-to DFFQuotient[158]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[159]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[160]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[161]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[162]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[163]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[164]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[165]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[166]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[167]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[168]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[169]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[170]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[171]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[172]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[173]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[174]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[175]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[176]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[177]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[178]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[179]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[180]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[181]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[182]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[183]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[184]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[185]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[186]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[187]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[188]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[189]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[190]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[191]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[192]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[193]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[194]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[195]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[196]} POWER_UP_LEVEL=LOW;",
		"{-to DFFQuotient[197]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[198]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[199]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[200]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[201]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[202]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[203]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[204]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[205]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[206]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[207]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[208]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[209]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[210]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[211]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[212]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[213]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[214]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[215]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[216]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[217]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[218]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[219]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[220]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[221]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[222]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[223]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[224]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[225]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[226]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[227]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[228]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[229]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[230]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[231]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[232]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[233]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[234]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[235]} POWER_UP_LEVEL=HIGH;",
		"{-to DFFQuotient[236]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[237]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[238]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[239]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[240]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[241]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[242]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[243]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[244]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[245]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[246]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[247]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[248]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[249]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[250]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[251]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[252]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[253]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[254]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[255]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[256]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[257]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[258]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[259]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[260]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[261]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[262]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[263]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[264]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[265]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[266]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[267]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[268]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[269]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[270]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[271]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[272]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[273]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[274]} POWER_UP_LEVEL=LOW;",
		"{-to DFFQuotient[275]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[276]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[277]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[278]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[279]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[280]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[281]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[282]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[283]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[284]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[285]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[286]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[287]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[288]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[289]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[290]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[291]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[292]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[293]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[294]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[295]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[296]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[297]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[298]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[299]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[300]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[301]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[302]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[303]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[304]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[305]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[306]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[307]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[308]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[309]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[310]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[311]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[312]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[313]} POWER_UP_LEVEL=LOW;",
		"{-to DFFQuotient[314]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[315]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[316]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[317]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[318]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[319]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[320]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[321]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[322]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[323]} POWER_UP_LEVEL=LOW"} *)
module  div18_9_alt_u_div
	( 
	clock,
	denominator,
	numerator,
	quotient,
	remainder) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   [8:0]  denominator;
	input   [17:0]  numerator;
	output   [17:0]  quotient;
	output   [8:0]  remainder;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=HIGH"} *)
	reg	[161:0]	DFFDenominator;
	reg	[323:0]	DFFNumerator;
	wire	[323:0]	wire_DFFQuotient_d;
	reg	[323:0]	DFFQuotient;
	reg	[179:0]	DFFStage;
	wire  wire_add_sub_0_cout;
	wire  [0:0]   wire_add_sub_0_result;
	wire  wire_add_sub_1_cout;
	wire  [1:0]   wire_add_sub_1_result;
	wire	[10:0]	wire_add_sub_10_result_int;
	wire	wire_add_sub_10_cout;
	wire	[9:0]	wire_add_sub_10_dataa;
	wire	[9:0]	wire_add_sub_10_datab;
	wire	[9:0]	wire_add_sub_10_result;
	wire	[10:0]	wire_add_sub_11_result_int;
	wire	wire_add_sub_11_cout;
	wire	[9:0]	wire_add_sub_11_dataa;
	wire	[9:0]	wire_add_sub_11_datab;
	wire	[9:0]	wire_add_sub_11_result;
	wire	[10:0]	wire_add_sub_12_result_int;
	wire	wire_add_sub_12_cout;
	wire	[9:0]	wire_add_sub_12_dataa;
	wire	[9:0]	wire_add_sub_12_datab;
	wire	[9:0]	wire_add_sub_12_result;
	wire	[10:0]	wire_add_sub_13_result_int;
	wire	wire_add_sub_13_cout;
	wire	[9:0]	wire_add_sub_13_dataa;
	wire	[9:0]	wire_add_sub_13_datab;
	wire	[9:0]	wire_add_sub_13_result;
	wire	[10:0]	wire_add_sub_14_result_int;
	wire	wire_add_sub_14_cout;
	wire	[9:0]	wire_add_sub_14_dataa;
	wire	[9:0]	wire_add_sub_14_datab;
	wire	[9:0]	wire_add_sub_14_result;
	wire	[10:0]	wire_add_sub_15_result_int;
	wire	wire_add_sub_15_cout;
	wire	[9:0]	wire_add_sub_15_dataa;
	wire	[9:0]	wire_add_sub_15_datab;
	wire	[9:0]	wire_add_sub_15_result;
	wire	[10:0]	wire_add_sub_16_result_int;
	wire	wire_add_sub_16_cout;
	wire	[9:0]	wire_add_sub_16_dataa;
	wire	[9:0]	wire_add_sub_16_datab;
	wire	[9:0]	wire_add_sub_16_result;
	wire	[10:0]	wire_add_sub_17_result_int;
	wire	wire_add_sub_17_cout;
	wire	[9:0]	wire_add_sub_17_dataa;
	wire	[9:0]	wire_add_sub_17_datab;
	wire	[9:0]	wire_add_sub_17_result;
	wire	[3:0]	wire_add_sub_2_result_int;
	wire	wire_add_sub_2_cout;
	wire	[2:0]	wire_add_sub_2_dataa;
	wire	[2:0]	wire_add_sub_2_datab;
	wire	[2:0]	wire_add_sub_2_result;
	wire	[4:0]	wire_add_sub_3_result_int;
	wire	wire_add_sub_3_cout;
	wire	[3:0]	wire_add_sub_3_dataa;
	wire	[3:0]	wire_add_sub_3_datab;
	wire	[3:0]	wire_add_sub_3_result;
	wire	[5:0]	wire_add_sub_4_result_int;
	wire	wire_add_sub_4_cout;
	wire	[4:0]	wire_add_sub_4_dataa;
	wire	[4:0]	wire_add_sub_4_datab;
	wire	[4:0]	wire_add_sub_4_result;
	wire	[6:0]	wire_add_sub_5_result_int;
	wire	wire_add_sub_5_cout;
	wire	[5:0]	wire_add_sub_5_dataa;
	wire	[5:0]	wire_add_sub_5_datab;
	wire	[5:0]	wire_add_sub_5_result;
	wire	[7:0]	wire_add_sub_6_result_int;
	wire	wire_add_sub_6_cout;
	wire	[6:0]	wire_add_sub_6_dataa;
	wire	[6:0]	wire_add_sub_6_datab;
	wire	[6:0]	wire_add_sub_6_result;
	wire	[8:0]	wire_add_sub_7_result_int;
	wire	wire_add_sub_7_cout;
	wire	[7:0]	wire_add_sub_7_dataa;
	wire	[7:0]	wire_add_sub_7_datab;
	wire	[7:0]	wire_add_sub_7_result;
	wire	[9:0]	wire_add_sub_8_result_int;
	wire	wire_add_sub_8_cout;
	wire	[8:0]	wire_add_sub_8_dataa;
	wire	[8:0]	wire_add_sub_8_datab;
	wire	[8:0]	wire_add_sub_8_result;
	wire	[10:0]	wire_add_sub_9_result_int;
	wire	wire_add_sub_9_cout;
	wire	[9:0]	wire_add_sub_9_dataa;
	wire	[9:0]	wire_add_sub_9_datab;
	wire	[9:0]	wire_add_sub_9_result;
	wire aclr;
	wire clk_en;
	wire  [189:0]  DenominatorIn;
	wire  [189:0]  DenominatorIn_tmp;
	wire  gnd_wire;
	wire  [341:0]  nose;
	wire  [341:0]  NumeratorIn;
	wire  [341:0]  NumeratorIn_tmp;
	wire  [179:0]  prestg;
	wire  [17:0]  quotient_tmp;
	wire  [170:0]  sel;
	wire  [341:0]  selnose;
	wire  [189:0]  StageIn;
	wire  [189:0]  StageIn_tmp;
	wire  [179:0]  StageOut;
	wire  vcc_wire;

	// synopsys translate_off
	initial
		DFFDenominator = {162{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator <= {162{1'b1}};
		else if  (clk_en == 1'b1)   DFFDenominator <= {DFFDenominator[152:0], denominator};
	// synopsys translate_off
	initial
		DFFNumerator = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFNumerator <= 324'b0;
		else if  (clk_en == 1'b1)   DFFNumerator <= {DFFNumerator[305:0], numerator};
	// synopsys translate_off
	initial
		DFFQuotient[0:0] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[0:0] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[0:0] <= wire_DFFQuotient_d[0:0];
	// synopsys translate_off
	initial
		DFFQuotient[1:1] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[1:1] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[1:1] <= wire_DFFQuotient_d[1:1];
	// synopsys translate_off
	initial
		DFFQuotient[2:2] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[2:2] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[2:2] <= wire_DFFQuotient_d[2:2];
	// synopsys translate_off
	initial
		DFFQuotient[3:3] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[3:3] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[3:3] <= wire_DFFQuotient_d[3:3];
	// synopsys translate_off
	initial
		DFFQuotient[4:4] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[4:4] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[4:4] <= wire_DFFQuotient_d[4:4];
	// synopsys translate_off
	initial
		DFFQuotient[5:5] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[5:5] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[5:5] <= wire_DFFQuotient_d[5:5];
	// synopsys translate_off
	initial
		DFFQuotient[6:6] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[6:6] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[6:6] <= wire_DFFQuotient_d[6:6];
	// synopsys translate_off
	initial
		DFFQuotient[7:7] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[7:7] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[7:7] <= wire_DFFQuotient_d[7:7];
	// synopsys translate_off
	initial
		DFFQuotient[8:8] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[8:8] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[8:8] <= wire_DFFQuotient_d[8:8];
	// synopsys translate_off
	initial
		DFFQuotient[9:9] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[9:9] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[9:9] <= wire_DFFQuotient_d[9:9];
	// synopsys translate_off
	initial
		DFFQuotient[10:10] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[10:10] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[10:10] <= wire_DFFQuotient_d[10:10];
	// synopsys translate_off
	initial
		DFFQuotient[11:11] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[11:11] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[11:11] <= wire_DFFQuotient_d[11:11];
	// synopsys translate_off
	initial
		DFFQuotient[12:12] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[12:12] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[12:12] <= wire_DFFQuotient_d[12:12];
	// synopsys translate_off
	initial
		DFFQuotient[13:13] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[13:13] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[13:13] <= wire_DFFQuotient_d[13:13];
	// synopsys translate_off
	initial
		DFFQuotient[14:14] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[14:14] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[14:14] <= wire_DFFQuotient_d[14:14];
	// synopsys translate_off
	initial
		DFFQuotient[15:15] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[15:15] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[15:15] <= wire_DFFQuotient_d[15:15];
	// synopsys translate_off
	initial
		DFFQuotient[16:16] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[16:16] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[16:16] <= wire_DFFQuotient_d[16:16];
	// synopsys translate_off
	initial
		DFFQuotient[17:17] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[17:17] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[17:17] <= wire_DFFQuotient_d[17:17];
	// synopsys translate_off
	initial
		DFFQuotient[18:18] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[18:18] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[18:18] <= wire_DFFQuotient_d[18:18];
	// synopsys translate_off
	initial
		DFFQuotient[19:19] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[19:19] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[19:19] <= wire_DFFQuotient_d[19:19];
	// synopsys translate_off
	initial
		DFFQuotient[20:20] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[20:20] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[20:20] <= wire_DFFQuotient_d[20:20];
	// synopsys translate_off
	initial
		DFFQuotient[21:21] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[21:21] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[21:21] <= wire_DFFQuotient_d[21:21];
	// synopsys translate_off
	initial
		DFFQuotient[22:22] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[22:22] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[22:22] <= wire_DFFQuotient_d[22:22];
	// synopsys translate_off
	initial
		DFFQuotient[23:23] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[23:23] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[23:23] <= wire_DFFQuotient_d[23:23];
	// synopsys translate_off
	initial
		DFFQuotient[24:24] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[24:24] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[24:24] <= wire_DFFQuotient_d[24:24];
	// synopsys translate_off
	initial
		DFFQuotient[25:25] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[25:25] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[25:25] <= wire_DFFQuotient_d[25:25];
	// synopsys translate_off
	initial
		DFFQuotient[26:26] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[26:26] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[26:26] <= wire_DFFQuotient_d[26:26];
	// synopsys translate_off
	initial
		DFFQuotient[27:27] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[27:27] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[27:27] <= wire_DFFQuotient_d[27:27];
	// synopsys translate_off
	initial
		DFFQuotient[28:28] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[28:28] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[28:28] <= wire_DFFQuotient_d[28:28];
	// synopsys translate_off
	initial
		DFFQuotient[29:29] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[29:29] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[29:29] <= wire_DFFQuotient_d[29:29];
	// synopsys translate_off
	initial
		DFFQuotient[30:30] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[30:30] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[30:30] <= wire_DFFQuotient_d[30:30];
	// synopsys translate_off
	initial
		DFFQuotient[31:31] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[31:31] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[31:31] <= wire_DFFQuotient_d[31:31];
	// synopsys translate_off
	initial
		DFFQuotient[32:32] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[32:32] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[32:32] <= wire_DFFQuotient_d[32:32];
	// synopsys translate_off
	initial
		DFFQuotient[33:33] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[33:33] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[33:33] <= wire_DFFQuotient_d[33:33];
	// synopsys translate_off
	initial
		DFFQuotient[34:34] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[34:34] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[34:34] <= wire_DFFQuotient_d[34:34];
	// synopsys translate_off
	initial
		DFFQuotient[35:35] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[35:35] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[35:35] <= wire_DFFQuotient_d[35:35];
	// synopsys translate_off
	initial
		DFFQuotient[36:36] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[36:36] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[36:36] <= wire_DFFQuotient_d[36:36];
	// synopsys translate_off
	initial
		DFFQuotient[37:37] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[37:37] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[37:37] <= wire_DFFQuotient_d[37:37];
	// synopsys translate_off
	initial
		DFFQuotient[38:38] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[38:38] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[38:38] <= wire_DFFQuotient_d[38:38];
	// synopsys translate_off
	initial
		DFFQuotient[39:39] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[39:39] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[39:39] <= wire_DFFQuotient_d[39:39];
	// synopsys translate_off
	initial
		DFFQuotient[40:40] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[40:40] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[40:40] <= wire_DFFQuotient_d[40:40];
	// synopsys translate_off
	initial
		DFFQuotient[41:41] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[41:41] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[41:41] <= wire_DFFQuotient_d[41:41];
	// synopsys translate_off
	initial
		DFFQuotient[42:42] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[42:42] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[42:42] <= wire_DFFQuotient_d[42:42];
	// synopsys translate_off
	initial
		DFFQuotient[43:43] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[43:43] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[43:43] <= wire_DFFQuotient_d[43:43];
	// synopsys translate_off
	initial
		DFFQuotient[44:44] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[44:44] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[44:44] <= wire_DFFQuotient_d[44:44];
	// synopsys translate_off
	initial
		DFFQuotient[45:45] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[45:45] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[45:45] <= wire_DFFQuotient_d[45:45];
	// synopsys translate_off
	initial
		DFFQuotient[46:46] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[46:46] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[46:46] <= wire_DFFQuotient_d[46:46];
	// synopsys translate_off
	initial
		DFFQuotient[47:47] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[47:47] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[47:47] <= wire_DFFQuotient_d[47:47];
	// synopsys translate_off
	initial
		DFFQuotient[48:48] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[48:48] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[48:48] <= wire_DFFQuotient_d[48:48];
	// synopsys translate_off
	initial
		DFFQuotient[49:49] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[49:49] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[49:49] <= wire_DFFQuotient_d[49:49];
	// synopsys translate_off
	initial
		DFFQuotient[50:50] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[50:50] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[50:50] <= wire_DFFQuotient_d[50:50];
	// synopsys translate_off
	initial
		DFFQuotient[51:51] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[51:51] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[51:51] <= wire_DFFQuotient_d[51:51];
	// synopsys translate_off
	initial
		DFFQuotient[52:52] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[52:52] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[52:52] <= wire_DFFQuotient_d[52:52];
	// synopsys translate_off
	initial
		DFFQuotient[53:53] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[53:53] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[53:53] <= wire_DFFQuotient_d[53:53];
	// synopsys translate_off
	initial
		DFFQuotient[54:54] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[54:54] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[54:54] <= wire_DFFQuotient_d[54:54];
	// synopsys translate_off
	initial
		DFFQuotient[55:55] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[55:55] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[55:55] <= wire_DFFQuotient_d[55:55];
	// synopsys translate_off
	initial
		DFFQuotient[56:56] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[56:56] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[56:56] <= wire_DFFQuotient_d[56:56];
	// synopsys translate_off
	initial
		DFFQuotient[57:57] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[57:57] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[57:57] <= wire_DFFQuotient_d[57:57];
	// synopsys translate_off
	initial
		DFFQuotient[58:58] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[58:58] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[58:58] <= wire_DFFQuotient_d[58:58];
	// synopsys translate_off
	initial
		DFFQuotient[59:59] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[59:59] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[59:59] <= wire_DFFQuotient_d[59:59];
	// synopsys translate_off
	initial
		DFFQuotient[60:60] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[60:60] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[60:60] <= wire_DFFQuotient_d[60:60];
	// synopsys translate_off
	initial
		DFFQuotient[61:61] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[61:61] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[61:61] <= wire_DFFQuotient_d[61:61];
	// synopsys translate_off
	initial
		DFFQuotient[62:62] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[62:62] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[62:62] <= wire_DFFQuotient_d[62:62];
	// synopsys translate_off
	initial
		DFFQuotient[63:63] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[63:63] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[63:63] <= wire_DFFQuotient_d[63:63];
	// synopsys translate_off
	initial
		DFFQuotient[64:64] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[64:64] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[64:64] <= wire_DFFQuotient_d[64:64];
	// synopsys translate_off
	initial
		DFFQuotient[65:65] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[65:65] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[65:65] <= wire_DFFQuotient_d[65:65];
	// synopsys translate_off
	initial
		DFFQuotient[66:66] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[66:66] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[66:66] <= wire_DFFQuotient_d[66:66];
	// synopsys translate_off
	initial
		DFFQuotient[67:67] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[67:67] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[67:67] <= wire_DFFQuotient_d[67:67];
	// synopsys translate_off
	initial
		DFFQuotient[68:68] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[68:68] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[68:68] <= wire_DFFQuotient_d[68:68];
	// synopsys translate_off
	initial
		DFFQuotient[69:69] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[69:69] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[69:69] <= wire_DFFQuotient_d[69:69];
	// synopsys translate_off
	initial
		DFFQuotient[70:70] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[70:70] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[70:70] <= wire_DFFQuotient_d[70:70];
	// synopsys translate_off
	initial
		DFFQuotient[71:71] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[71:71] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[71:71] <= wire_DFFQuotient_d[71:71];
	// synopsys translate_off
	initial
		DFFQuotient[72:72] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[72:72] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[72:72] <= wire_DFFQuotient_d[72:72];
	// synopsys translate_off
	initial
		DFFQuotient[73:73] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[73:73] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[73:73] <= wire_DFFQuotient_d[73:73];
	// synopsys translate_off
	initial
		DFFQuotient[74:74] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[74:74] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[74:74] <= wire_DFFQuotient_d[74:74];
	// synopsys translate_off
	initial
		DFFQuotient[75:75] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[75:75] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[75:75] <= wire_DFFQuotient_d[75:75];
	// synopsys translate_off
	initial
		DFFQuotient[76:76] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[76:76] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[76:76] <= wire_DFFQuotient_d[76:76];
	// synopsys translate_off
	initial
		DFFQuotient[77:77] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[77:77] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[77:77] <= wire_DFFQuotient_d[77:77];
	// synopsys translate_off
	initial
		DFFQuotient[78:78] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[78:78] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[78:78] <= wire_DFFQuotient_d[78:78];
	// synopsys translate_off
	initial
		DFFQuotient[79:79] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[79:79] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[79:79] <= wire_DFFQuotient_d[79:79];
	// synopsys translate_off
	initial
		DFFQuotient[80:80] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[80:80] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[80:80] <= wire_DFFQuotient_d[80:80];
	// synopsys translate_off
	initial
		DFFQuotient[81:81] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[81:81] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[81:81] <= wire_DFFQuotient_d[81:81];
	// synopsys translate_off
	initial
		DFFQuotient[82:82] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[82:82] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[82:82] <= wire_DFFQuotient_d[82:82];
	// synopsys translate_off
	initial
		DFFQuotient[83:83] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[83:83] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[83:83] <= wire_DFFQuotient_d[83:83];
	// synopsys translate_off
	initial
		DFFQuotient[84:84] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[84:84] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[84:84] <= wire_DFFQuotient_d[84:84];
	// synopsys translate_off
	initial
		DFFQuotient[85:85] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[85:85] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[85:85] <= wire_DFFQuotient_d[85:85];
	// synopsys translate_off
	initial
		DFFQuotient[86:86] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[86:86] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[86:86] <= wire_DFFQuotient_d[86:86];
	// synopsys translate_off
	initial
		DFFQuotient[87:87] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[87:87] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[87:87] <= wire_DFFQuotient_d[87:87];
	// synopsys translate_off
	initial
		DFFQuotient[88:88] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[88:88] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[88:88] <= wire_DFFQuotient_d[88:88];
	// synopsys translate_off
	initial
		DFFQuotient[89:89] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[89:89] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[89:89] <= wire_DFFQuotient_d[89:89];
	// synopsys translate_off
	initial
		DFFQuotient[90:90] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[90:90] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[90:90] <= wire_DFFQuotient_d[90:90];
	// synopsys translate_off
	initial
		DFFQuotient[91:91] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[91:91] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[91:91] <= wire_DFFQuotient_d[91:91];
	// synopsys translate_off
	initial
		DFFQuotient[92:92] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[92:92] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[92:92] <= wire_DFFQuotient_d[92:92];
	// synopsys translate_off
	initial
		DFFQuotient[93:93] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[93:93] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[93:93] <= wire_DFFQuotient_d[93:93];
	// synopsys translate_off
	initial
		DFFQuotient[94:94] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[94:94] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[94:94] <= wire_DFFQuotient_d[94:94];
	// synopsys translate_off
	initial
		DFFQuotient[95:95] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[95:95] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[95:95] <= wire_DFFQuotient_d[95:95];
	// synopsys translate_off
	initial
		DFFQuotient[96:96] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[96:96] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[96:96] <= wire_DFFQuotient_d[96:96];
	// synopsys translate_off
	initial
		DFFQuotient[97:97] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[97:97] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[97:97] <= wire_DFFQuotient_d[97:97];
	// synopsys translate_off
	initial
		DFFQuotient[98:98] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[98:98] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[98:98] <= wire_DFFQuotient_d[98:98];
	// synopsys translate_off
	initial
		DFFQuotient[99:99] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[99:99] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[99:99] <= wire_DFFQuotient_d[99:99];
	// synopsys translate_off
	initial
		DFFQuotient[100:100] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[100:100] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[100:100] <= wire_DFFQuotient_d[100:100];
	// synopsys translate_off
	initial
		DFFQuotient[101:101] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[101:101] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[101:101] <= wire_DFFQuotient_d[101:101];
	// synopsys translate_off
	initial
		DFFQuotient[102:102] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[102:102] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[102:102] <= wire_DFFQuotient_d[102:102];
	// synopsys translate_off
	initial
		DFFQuotient[103:103] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[103:103] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[103:103] <= wire_DFFQuotient_d[103:103];
	// synopsys translate_off
	initial
		DFFQuotient[104:104] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[104:104] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[104:104] <= wire_DFFQuotient_d[104:104];
	// synopsys translate_off
	initial
		DFFQuotient[105:105] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[105:105] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[105:105] <= wire_DFFQuotient_d[105:105];
	// synopsys translate_off
	initial
		DFFQuotient[106:106] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[106:106] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[106:106] <= wire_DFFQuotient_d[106:106];
	// synopsys translate_off
	initial
		DFFQuotient[107:107] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[107:107] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[107:107] <= wire_DFFQuotient_d[107:107];
	// synopsys translate_off
	initial
		DFFQuotient[108:108] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[108:108] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[108:108] <= wire_DFFQuotient_d[108:108];
	// synopsys translate_off
	initial
		DFFQuotient[109:109] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[109:109] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[109:109] <= wire_DFFQuotient_d[109:109];
	// synopsys translate_off
	initial
		DFFQuotient[110:110] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[110:110] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[110:110] <= wire_DFFQuotient_d[110:110];
	// synopsys translate_off
	initial
		DFFQuotient[111:111] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[111:111] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[111:111] <= wire_DFFQuotient_d[111:111];
	// synopsys translate_off
	initial
		DFFQuotient[112:112] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[112:112] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[112:112] <= wire_DFFQuotient_d[112:112];
	// synopsys translate_off
	initial
		DFFQuotient[113:113] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[113:113] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[113:113] <= wire_DFFQuotient_d[113:113];
	// synopsys translate_off
	initial
		DFFQuotient[114:114] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[114:114] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[114:114] <= wire_DFFQuotient_d[114:114];
	// synopsys translate_off
	initial
		DFFQuotient[115:115] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[115:115] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[115:115] <= wire_DFFQuotient_d[115:115];
	// synopsys translate_off
	initial
		DFFQuotient[116:116] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[116:116] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[116:116] <= wire_DFFQuotient_d[116:116];
	// synopsys translate_off
	initial
		DFFQuotient[117:117] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[117:117] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[117:117] <= wire_DFFQuotient_d[117:117];
	// synopsys translate_off
	initial
		DFFQuotient[118:118] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[118:118] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[118:118] <= wire_DFFQuotient_d[118:118];
	// synopsys translate_off
	initial
		DFFQuotient[119:119] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[119:119] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[119:119] <= wire_DFFQuotient_d[119:119];
	// synopsys translate_off
	initial
		DFFQuotient[120:120] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[120:120] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[120:120] <= wire_DFFQuotient_d[120:120];
	// synopsys translate_off
	initial
		DFFQuotient[121:121] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[121:121] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[121:121] <= wire_DFFQuotient_d[121:121];
	// synopsys translate_off
	initial
		DFFQuotient[122:122] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[122:122] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[122:122] <= wire_DFFQuotient_d[122:122];
	// synopsys translate_off
	initial
		DFFQuotient[123:123] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[123:123] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[123:123] <= wire_DFFQuotient_d[123:123];
	// synopsys translate_off
	initial
		DFFQuotient[124:124] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[124:124] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[124:124] <= wire_DFFQuotient_d[124:124];
	// synopsys translate_off
	initial
		DFFQuotient[125:125] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[125:125] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[125:125] <= wire_DFFQuotient_d[125:125];
	// synopsys translate_off
	initial
		DFFQuotient[126:126] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[126:126] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[126:126] <= wire_DFFQuotient_d[126:126];
	// synopsys translate_off
	initial
		DFFQuotient[127:127] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[127:127] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[127:127] <= wire_DFFQuotient_d[127:127];
	// synopsys translate_off
	initial
		DFFQuotient[128:128] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[128:128] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[128:128] <= wire_DFFQuotient_d[128:128];
	// synopsys translate_off
	initial
		DFFQuotient[129:129] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[129:129] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[129:129] <= wire_DFFQuotient_d[129:129];
	// synopsys translate_off
	initial
		DFFQuotient[130:130] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[130:130] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[130:130] <= wire_DFFQuotient_d[130:130];
	// synopsys translate_off
	initial
		DFFQuotient[131:131] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[131:131] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[131:131] <= wire_DFFQuotient_d[131:131];
	// synopsys translate_off
	initial
		DFFQuotient[132:132] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[132:132] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[132:132] <= wire_DFFQuotient_d[132:132];
	// synopsys translate_off
	initial
		DFFQuotient[133:133] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[133:133] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[133:133] <= wire_DFFQuotient_d[133:133];
	// synopsys translate_off
	initial
		DFFQuotient[134:134] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[134:134] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[134:134] <= wire_DFFQuotient_d[134:134];
	// synopsys translate_off
	initial
		DFFQuotient[135:135] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[135:135] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[135:135] <= wire_DFFQuotient_d[135:135];
	// synopsys translate_off
	initial
		DFFQuotient[136:136] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[136:136] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[136:136] <= wire_DFFQuotient_d[136:136];
	// synopsys translate_off
	initial
		DFFQuotient[137:137] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[137:137] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[137:137] <= wire_DFFQuotient_d[137:137];
	// synopsys translate_off
	initial
		DFFQuotient[138:138] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[138:138] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[138:138] <= wire_DFFQuotient_d[138:138];
	// synopsys translate_off
	initial
		DFFQuotient[139:139] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[139:139] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[139:139] <= wire_DFFQuotient_d[139:139];
	// synopsys translate_off
	initial
		DFFQuotient[140:140] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[140:140] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[140:140] <= wire_DFFQuotient_d[140:140];
	// synopsys translate_off
	initial
		DFFQuotient[141:141] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[141:141] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[141:141] <= wire_DFFQuotient_d[141:141];
	// synopsys translate_off
	initial
		DFFQuotient[142:142] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[142:142] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[142:142] <= wire_DFFQuotient_d[142:142];
	// synopsys translate_off
	initial
		DFFQuotient[143:143] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[143:143] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[143:143] <= wire_DFFQuotient_d[143:143];
	// synopsys translate_off
	initial
		DFFQuotient[144:144] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[144:144] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[144:144] <= wire_DFFQuotient_d[144:144];
	// synopsys translate_off
	initial
		DFFQuotient[145:145] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[145:145] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[145:145] <= wire_DFFQuotient_d[145:145];
	// synopsys translate_off
	initial
		DFFQuotient[146:146] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[146:146] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[146:146] <= wire_DFFQuotient_d[146:146];
	// synopsys translate_off
	initial
		DFFQuotient[147:147] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[147:147] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[147:147] <= wire_DFFQuotient_d[147:147];
	// synopsys translate_off
	initial
		DFFQuotient[148:148] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[148:148] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[148:148] <= wire_DFFQuotient_d[148:148];
	// synopsys translate_off
	initial
		DFFQuotient[149:149] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[149:149] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[149:149] <= wire_DFFQuotient_d[149:149];
	// synopsys translate_off
	initial
		DFFQuotient[150:150] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[150:150] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[150:150] <= wire_DFFQuotient_d[150:150];
	// synopsys translate_off
	initial
		DFFQuotient[151:151] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[151:151] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[151:151] <= wire_DFFQuotient_d[151:151];
	// synopsys translate_off
	initial
		DFFQuotient[152:152] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[152:152] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[152:152] <= wire_DFFQuotient_d[152:152];
	// synopsys translate_off
	initial
		DFFQuotient[153:153] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[153:153] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[153:153] <= wire_DFFQuotient_d[153:153];
	// synopsys translate_off
	initial
		DFFQuotient[154:154] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[154:154] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[154:154] <= wire_DFFQuotient_d[154:154];
	// synopsys translate_off
	initial
		DFFQuotient[155:155] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[155:155] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[155:155] <= wire_DFFQuotient_d[155:155];
	// synopsys translate_off
	initial
		DFFQuotient[156:156] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[156:156] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[156:156] <= wire_DFFQuotient_d[156:156];
	// synopsys translate_off
	initial
		DFFQuotient[157:157] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[157:157] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[157:157] <= wire_DFFQuotient_d[157:157];
	// synopsys translate_off
	initial
		DFFQuotient[158:158] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[158:158] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[158:158] <= wire_DFFQuotient_d[158:158];
	// synopsys translate_off
	initial
		DFFQuotient[159:159] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[159:159] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[159:159] <= wire_DFFQuotient_d[159:159];
	// synopsys translate_off
	initial
		DFFQuotient[160:160] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[160:160] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[160:160] <= wire_DFFQuotient_d[160:160];
	// synopsys translate_off
	initial
		DFFQuotient[161:161] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[161:161] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[161:161] <= wire_DFFQuotient_d[161:161];
	// synopsys translate_off
	initial
		DFFQuotient[162:162] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[162:162] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[162:162] <= wire_DFFQuotient_d[162:162];
	// synopsys translate_off
	initial
		DFFQuotient[163:163] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[163:163] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[163:163] <= wire_DFFQuotient_d[163:163];
	// synopsys translate_off
	initial
		DFFQuotient[164:164] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[164:164] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[164:164] <= wire_DFFQuotient_d[164:164];
	// synopsys translate_off
	initial
		DFFQuotient[165:165] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[165:165] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[165:165] <= wire_DFFQuotient_d[165:165];
	// synopsys translate_off
	initial
		DFFQuotient[166:166] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[166:166] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[166:166] <= wire_DFFQuotient_d[166:166];
	// synopsys translate_off
	initial
		DFFQuotient[167:167] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[167:167] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[167:167] <= wire_DFFQuotient_d[167:167];
	// synopsys translate_off
	initial
		DFFQuotient[168:168] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[168:168] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[168:168] <= wire_DFFQuotient_d[168:168];
	// synopsys translate_off
	initial
		DFFQuotient[169:169] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[169:169] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[169:169] <= wire_DFFQuotient_d[169:169];
	// synopsys translate_off
	initial
		DFFQuotient[170:170] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[170:170] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[170:170] <= wire_DFFQuotient_d[170:170];
	// synopsys translate_off
	initial
		DFFQuotient[171:171] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[171:171] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[171:171] <= wire_DFFQuotient_d[171:171];
	// synopsys translate_off
	initial
		DFFQuotient[172:172] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[172:172] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[172:172] <= wire_DFFQuotient_d[172:172];
	// synopsys translate_off
	initial
		DFFQuotient[173:173] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[173:173] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[173:173] <= wire_DFFQuotient_d[173:173];
	// synopsys translate_off
	initial
		DFFQuotient[174:174] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[174:174] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[174:174] <= wire_DFFQuotient_d[174:174];
	// synopsys translate_off
	initial
		DFFQuotient[175:175] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[175:175] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[175:175] <= wire_DFFQuotient_d[175:175];
	// synopsys translate_off
	initial
		DFFQuotient[176:176] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[176:176] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[176:176] <= wire_DFFQuotient_d[176:176];
	// synopsys translate_off
	initial
		DFFQuotient[177:177] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[177:177] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[177:177] <= wire_DFFQuotient_d[177:177];
	// synopsys translate_off
	initial
		DFFQuotient[178:178] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[178:178] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[178:178] <= wire_DFFQuotient_d[178:178];
	// synopsys translate_off
	initial
		DFFQuotient[179:179] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[179:179] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[179:179] <= wire_DFFQuotient_d[179:179];
	// synopsys translate_off
	initial
		DFFQuotient[180:180] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[180:180] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[180:180] <= wire_DFFQuotient_d[180:180];
	// synopsys translate_off
	initial
		DFFQuotient[181:181] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[181:181] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[181:181] <= wire_DFFQuotient_d[181:181];
	// synopsys translate_off
	initial
		DFFQuotient[182:182] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[182:182] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[182:182] <= wire_DFFQuotient_d[182:182];
	// synopsys translate_off
	initial
		DFFQuotient[183:183] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[183:183] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[183:183] <= wire_DFFQuotient_d[183:183];
	// synopsys translate_off
	initial
		DFFQuotient[184:184] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[184:184] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[184:184] <= wire_DFFQuotient_d[184:184];
	// synopsys translate_off
	initial
		DFFQuotient[185:185] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[185:185] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[185:185] <= wire_DFFQuotient_d[185:185];
	// synopsys translate_off
	initial
		DFFQuotient[186:186] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[186:186] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[186:186] <= wire_DFFQuotient_d[186:186];
	// synopsys translate_off
	initial
		DFFQuotient[187:187] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[187:187] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[187:187] <= wire_DFFQuotient_d[187:187];
	// synopsys translate_off
	initial
		DFFQuotient[188:188] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[188:188] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[188:188] <= wire_DFFQuotient_d[188:188];
	// synopsys translate_off
	initial
		DFFQuotient[189:189] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[189:189] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[189:189] <= wire_DFFQuotient_d[189:189];
	// synopsys translate_off
	initial
		DFFQuotient[190:190] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[190:190] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[190:190] <= wire_DFFQuotient_d[190:190];
	// synopsys translate_off
	initial
		DFFQuotient[191:191] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[191:191] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[191:191] <= wire_DFFQuotient_d[191:191];
	// synopsys translate_off
	initial
		DFFQuotient[192:192] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[192:192] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[192:192] <= wire_DFFQuotient_d[192:192];
	// synopsys translate_off
	initial
		DFFQuotient[193:193] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[193:193] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[193:193] <= wire_DFFQuotient_d[193:193];
	// synopsys translate_off
	initial
		DFFQuotient[194:194] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[194:194] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[194:194] <= wire_DFFQuotient_d[194:194];
	// synopsys translate_off
	initial
		DFFQuotient[195:195] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[195:195] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[195:195] <= wire_DFFQuotient_d[195:195];
	// synopsys translate_off
	initial
		DFFQuotient[196:196] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[196:196] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[196:196] <= wire_DFFQuotient_d[196:196];
	// synopsys translate_off
	initial
		DFFQuotient[197:197] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[197:197] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[197:197] <= wire_DFFQuotient_d[197:197];
	// synopsys translate_off
	initial
		DFFQuotient[198:198] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[198:198] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[198:198] <= wire_DFFQuotient_d[198:198];
	// synopsys translate_off
	initial
		DFFQuotient[199:199] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[199:199] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[199:199] <= wire_DFFQuotient_d[199:199];
	// synopsys translate_off
	initial
		DFFQuotient[200:200] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[200:200] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[200:200] <= wire_DFFQuotient_d[200:200];
	// synopsys translate_off
	initial
		DFFQuotient[201:201] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[201:201] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[201:201] <= wire_DFFQuotient_d[201:201];
	// synopsys translate_off
	initial
		DFFQuotient[202:202] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[202:202] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[202:202] <= wire_DFFQuotient_d[202:202];
	// synopsys translate_off
	initial
		DFFQuotient[203:203] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[203:203] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[203:203] <= wire_DFFQuotient_d[203:203];
	// synopsys translate_off
	initial
		DFFQuotient[204:204] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[204:204] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[204:204] <= wire_DFFQuotient_d[204:204];
	// synopsys translate_off
	initial
		DFFQuotient[205:205] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[205:205] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[205:205] <= wire_DFFQuotient_d[205:205];
	// synopsys translate_off
	initial
		DFFQuotient[206:206] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[206:206] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[206:206] <= wire_DFFQuotient_d[206:206];
	// synopsys translate_off
	initial
		DFFQuotient[207:207] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[207:207] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[207:207] <= wire_DFFQuotient_d[207:207];
	// synopsys translate_off
	initial
		DFFQuotient[208:208] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[208:208] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[208:208] <= wire_DFFQuotient_d[208:208];
	// synopsys translate_off
	initial
		DFFQuotient[209:209] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[209:209] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[209:209] <= wire_DFFQuotient_d[209:209];
	// synopsys translate_off
	initial
		DFFQuotient[210:210] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[210:210] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[210:210] <= wire_DFFQuotient_d[210:210];
	// synopsys translate_off
	initial
		DFFQuotient[211:211] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[211:211] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[211:211] <= wire_DFFQuotient_d[211:211];
	// synopsys translate_off
	initial
		DFFQuotient[212:212] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[212:212] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[212:212] <= wire_DFFQuotient_d[212:212];
	// synopsys translate_off
	initial
		DFFQuotient[213:213] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[213:213] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[213:213] <= wire_DFFQuotient_d[213:213];
	// synopsys translate_off
	initial
		DFFQuotient[214:214] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[214:214] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[214:214] <= wire_DFFQuotient_d[214:214];
	// synopsys translate_off
	initial
		DFFQuotient[215:215] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[215:215] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[215:215] <= wire_DFFQuotient_d[215:215];
	// synopsys translate_off
	initial
		DFFQuotient[216:216] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[216:216] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[216:216] <= wire_DFFQuotient_d[216:216];
	// synopsys translate_off
	initial
		DFFQuotient[217:217] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[217:217] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[217:217] <= wire_DFFQuotient_d[217:217];
	// synopsys translate_off
	initial
		DFFQuotient[218:218] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[218:218] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[218:218] <= wire_DFFQuotient_d[218:218];
	// synopsys translate_off
	initial
		DFFQuotient[219:219] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[219:219] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[219:219] <= wire_DFFQuotient_d[219:219];
	// synopsys translate_off
	initial
		DFFQuotient[220:220] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[220:220] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[220:220] <= wire_DFFQuotient_d[220:220];
	// synopsys translate_off
	initial
		DFFQuotient[221:221] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[221:221] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[221:221] <= wire_DFFQuotient_d[221:221];
	// synopsys translate_off
	initial
		DFFQuotient[222:222] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[222:222] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[222:222] <= wire_DFFQuotient_d[222:222];
	// synopsys translate_off
	initial
		DFFQuotient[223:223] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[223:223] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[223:223] <= wire_DFFQuotient_d[223:223];
	// synopsys translate_off
	initial
		DFFQuotient[224:224] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[224:224] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[224:224] <= wire_DFFQuotient_d[224:224];
	// synopsys translate_off
	initial
		DFFQuotient[225:225] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[225:225] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[225:225] <= wire_DFFQuotient_d[225:225];
	// synopsys translate_off
	initial
		DFFQuotient[226:226] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[226:226] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[226:226] <= wire_DFFQuotient_d[226:226];
	// synopsys translate_off
	initial
		DFFQuotient[227:227] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[227:227] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[227:227] <= wire_DFFQuotient_d[227:227];
	// synopsys translate_off
	initial
		DFFQuotient[228:228] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[228:228] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[228:228] <= wire_DFFQuotient_d[228:228];
	// synopsys translate_off
	initial
		DFFQuotient[229:229] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[229:229] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[229:229] <= wire_DFFQuotient_d[229:229];
	// synopsys translate_off
	initial
		DFFQuotient[230:230] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[230:230] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[230:230] <= wire_DFFQuotient_d[230:230];
	// synopsys translate_off
	initial
		DFFQuotient[231:231] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[231:231] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[231:231] <= wire_DFFQuotient_d[231:231];
	// synopsys translate_off
	initial
		DFFQuotient[232:232] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[232:232] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[232:232] <= wire_DFFQuotient_d[232:232];
	// synopsys translate_off
	initial
		DFFQuotient[233:233] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[233:233] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[233:233] <= wire_DFFQuotient_d[233:233];
	// synopsys translate_off
	initial
		DFFQuotient[234:234] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[234:234] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[234:234] <= wire_DFFQuotient_d[234:234];
	// synopsys translate_off
	initial
		DFFQuotient[235:235] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[235:235] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[235:235] <= wire_DFFQuotient_d[235:235];
	// synopsys translate_off
	initial
		DFFQuotient[236:236] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[236:236] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[236:236] <= wire_DFFQuotient_d[236:236];
	// synopsys translate_off
	initial
		DFFQuotient[237:237] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[237:237] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[237:237] <= wire_DFFQuotient_d[237:237];
	// synopsys translate_off
	initial
		DFFQuotient[238:238] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[238:238] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[238:238] <= wire_DFFQuotient_d[238:238];
	// synopsys translate_off
	initial
		DFFQuotient[239:239] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[239:239] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[239:239] <= wire_DFFQuotient_d[239:239];
	// synopsys translate_off
	initial
		DFFQuotient[240:240] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[240:240] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[240:240] <= wire_DFFQuotient_d[240:240];
	// synopsys translate_off
	initial
		DFFQuotient[241:241] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[241:241] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[241:241] <= wire_DFFQuotient_d[241:241];
	// synopsys translate_off
	initial
		DFFQuotient[242:242] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[242:242] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[242:242] <= wire_DFFQuotient_d[242:242];
	// synopsys translate_off
	initial
		DFFQuotient[243:243] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[243:243] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[243:243] <= wire_DFFQuotient_d[243:243];
	// synopsys translate_off
	initial
		DFFQuotient[244:244] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[244:244] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[244:244] <= wire_DFFQuotient_d[244:244];
	// synopsys translate_off
	initial
		DFFQuotient[245:245] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[245:245] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[245:245] <= wire_DFFQuotient_d[245:245];
	// synopsys translate_off
	initial
		DFFQuotient[246:246] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[246:246] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[246:246] <= wire_DFFQuotient_d[246:246];
	// synopsys translate_off
	initial
		DFFQuotient[247:247] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[247:247] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[247:247] <= wire_DFFQuotient_d[247:247];
	// synopsys translate_off
	initial
		DFFQuotient[248:248] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[248:248] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[248:248] <= wire_DFFQuotient_d[248:248];
	// synopsys translate_off
	initial
		DFFQuotient[249:249] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[249:249] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[249:249] <= wire_DFFQuotient_d[249:249];
	// synopsys translate_off
	initial
		DFFQuotient[250:250] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[250:250] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[250:250] <= wire_DFFQuotient_d[250:250];
	// synopsys translate_off
	initial
		DFFQuotient[251:251] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[251:251] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[251:251] <= wire_DFFQuotient_d[251:251];
	// synopsys translate_off
	initial
		DFFQuotient[252:252] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[252:252] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[252:252] <= wire_DFFQuotient_d[252:252];
	// synopsys translate_off
	initial
		DFFQuotient[253:253] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[253:253] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[253:253] <= wire_DFFQuotient_d[253:253];
	// synopsys translate_off
	initial
		DFFQuotient[254:254] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[254:254] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[254:254] <= wire_DFFQuotient_d[254:254];
	// synopsys translate_off
	initial
		DFFQuotient[255:255] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[255:255] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[255:255] <= wire_DFFQuotient_d[255:255];
	// synopsys translate_off
	initial
		DFFQuotient[256:256] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[256:256] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[256:256] <= wire_DFFQuotient_d[256:256];
	// synopsys translate_off
	initial
		DFFQuotient[257:257] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[257:257] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[257:257] <= wire_DFFQuotient_d[257:257];
	// synopsys translate_off
	initial
		DFFQuotient[258:258] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[258:258] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[258:258] <= wire_DFFQuotient_d[258:258];
	// synopsys translate_off
	initial
		DFFQuotient[259:259] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[259:259] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[259:259] <= wire_DFFQuotient_d[259:259];
	// synopsys translate_off
	initial
		DFFQuotient[260:260] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[260:260] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[260:260] <= wire_DFFQuotient_d[260:260];
	// synopsys translate_off
	initial
		DFFQuotient[261:261] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[261:261] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[261:261] <= wire_DFFQuotient_d[261:261];
	// synopsys translate_off
	initial
		DFFQuotient[262:262] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[262:262] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[262:262] <= wire_DFFQuotient_d[262:262];
	// synopsys translate_off
	initial
		DFFQuotient[263:263] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[263:263] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[263:263] <= wire_DFFQuotient_d[263:263];
	// synopsys translate_off
	initial
		DFFQuotient[264:264] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[264:264] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[264:264] <= wire_DFFQuotient_d[264:264];
	// synopsys translate_off
	initial
		DFFQuotient[265:265] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[265:265] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[265:265] <= wire_DFFQuotient_d[265:265];
	// synopsys translate_off
	initial
		DFFQuotient[266:266] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[266:266] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[266:266] <= wire_DFFQuotient_d[266:266];
	// synopsys translate_off
	initial
		DFFQuotient[267:267] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[267:267] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[267:267] <= wire_DFFQuotient_d[267:267];
	// synopsys translate_off
	initial
		DFFQuotient[268:268] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[268:268] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[268:268] <= wire_DFFQuotient_d[268:268];
	// synopsys translate_off
	initial
		DFFQuotient[269:269] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[269:269] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[269:269] <= wire_DFFQuotient_d[269:269];
	// synopsys translate_off
	initial
		DFFQuotient[270:270] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[270:270] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[270:270] <= wire_DFFQuotient_d[270:270];
	// synopsys translate_off
	initial
		DFFQuotient[271:271] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[271:271] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[271:271] <= wire_DFFQuotient_d[271:271];
	// synopsys translate_off
	initial
		DFFQuotient[272:272] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[272:272] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[272:272] <= wire_DFFQuotient_d[272:272];
	// synopsys translate_off
	initial
		DFFQuotient[273:273] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[273:273] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[273:273] <= wire_DFFQuotient_d[273:273];
	// synopsys translate_off
	initial
		DFFQuotient[274:274] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[274:274] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[274:274] <= wire_DFFQuotient_d[274:274];
	// synopsys translate_off
	initial
		DFFQuotient[275:275] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[275:275] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[275:275] <= wire_DFFQuotient_d[275:275];
	// synopsys translate_off
	initial
		DFFQuotient[276:276] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[276:276] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[276:276] <= wire_DFFQuotient_d[276:276];
	// synopsys translate_off
	initial
		DFFQuotient[277:277] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[277:277] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[277:277] <= wire_DFFQuotient_d[277:277];
	// synopsys translate_off
	initial
		DFFQuotient[278:278] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[278:278] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[278:278] <= wire_DFFQuotient_d[278:278];
	// synopsys translate_off
	initial
		DFFQuotient[279:279] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[279:279] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[279:279] <= wire_DFFQuotient_d[279:279];
	// synopsys translate_off
	initial
		DFFQuotient[280:280] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[280:280] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[280:280] <= wire_DFFQuotient_d[280:280];
	// synopsys translate_off
	initial
		DFFQuotient[281:281] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[281:281] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[281:281] <= wire_DFFQuotient_d[281:281];
	// synopsys translate_off
	initial
		DFFQuotient[282:282] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[282:282] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[282:282] <= wire_DFFQuotient_d[282:282];
	// synopsys translate_off
	initial
		DFFQuotient[283:283] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[283:283] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[283:283] <= wire_DFFQuotient_d[283:283];
	// synopsys translate_off
	initial
		DFFQuotient[284:284] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[284:284] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[284:284] <= wire_DFFQuotient_d[284:284];
	// synopsys translate_off
	initial
		DFFQuotient[285:285] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[285:285] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[285:285] <= wire_DFFQuotient_d[285:285];
	// synopsys translate_off
	initial
		DFFQuotient[286:286] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[286:286] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[286:286] <= wire_DFFQuotient_d[286:286];
	// synopsys translate_off
	initial
		DFFQuotient[287:287] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[287:287] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[287:287] <= wire_DFFQuotient_d[287:287];
	// synopsys translate_off
	initial
		DFFQuotient[288:288] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[288:288] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[288:288] <= wire_DFFQuotient_d[288:288];
	// synopsys translate_off
	initial
		DFFQuotient[289:289] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[289:289] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[289:289] <= wire_DFFQuotient_d[289:289];
	// synopsys translate_off
	initial
		DFFQuotient[290:290] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[290:290] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[290:290] <= wire_DFFQuotient_d[290:290];
	// synopsys translate_off
	initial
		DFFQuotient[291:291] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[291:291] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[291:291] <= wire_DFFQuotient_d[291:291];
	// synopsys translate_off
	initial
		DFFQuotient[292:292] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[292:292] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[292:292] <= wire_DFFQuotient_d[292:292];
	// synopsys translate_off
	initial
		DFFQuotient[293:293] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[293:293] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[293:293] <= wire_DFFQuotient_d[293:293];
	// synopsys translate_off
	initial
		DFFQuotient[294:294] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[294:294] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[294:294] <= wire_DFFQuotient_d[294:294];
	// synopsys translate_off
	initial
		DFFQuotient[295:295] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[295:295] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[295:295] <= wire_DFFQuotient_d[295:295];
	// synopsys translate_off
	initial
		DFFQuotient[296:296] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[296:296] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[296:296] <= wire_DFFQuotient_d[296:296];
	// synopsys translate_off
	initial
		DFFQuotient[297:297] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[297:297] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[297:297] <= wire_DFFQuotient_d[297:297];
	// synopsys translate_off
	initial
		DFFQuotient[298:298] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[298:298] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[298:298] <= wire_DFFQuotient_d[298:298];
	// synopsys translate_off
	initial
		DFFQuotient[299:299] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[299:299] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[299:299] <= wire_DFFQuotient_d[299:299];
	// synopsys translate_off
	initial
		DFFQuotient[300:300] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[300:300] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[300:300] <= wire_DFFQuotient_d[300:300];
	// synopsys translate_off
	initial
		DFFQuotient[301:301] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[301:301] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[301:301] <= wire_DFFQuotient_d[301:301];
	// synopsys translate_off
	initial
		DFFQuotient[302:302] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[302:302] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[302:302] <= wire_DFFQuotient_d[302:302];
	// synopsys translate_off
	initial
		DFFQuotient[303:303] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[303:303] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[303:303] <= wire_DFFQuotient_d[303:303];
	// synopsys translate_off
	initial
		DFFQuotient[304:304] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[304:304] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[304:304] <= wire_DFFQuotient_d[304:304];
	// synopsys translate_off
	initial
		DFFQuotient[305:305] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[305:305] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[305:305] <= wire_DFFQuotient_d[305:305];
	// synopsys translate_off
	initial
		DFFQuotient[306:306] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[306:306] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[306:306] <= wire_DFFQuotient_d[306:306];
	// synopsys translate_off
	initial
		DFFQuotient[307:307] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[307:307] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[307:307] <= wire_DFFQuotient_d[307:307];
	// synopsys translate_off
	initial
		DFFQuotient[308:308] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[308:308] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[308:308] <= wire_DFFQuotient_d[308:308];
	// synopsys translate_off
	initial
		DFFQuotient[309:309] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[309:309] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[309:309] <= wire_DFFQuotient_d[309:309];
	// synopsys translate_off
	initial
		DFFQuotient[310:310] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[310:310] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[310:310] <= wire_DFFQuotient_d[310:310];
	// synopsys translate_off
	initial
		DFFQuotient[311:311] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[311:311] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[311:311] <= wire_DFFQuotient_d[311:311];
	// synopsys translate_off
	initial
		DFFQuotient[312:312] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[312:312] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[312:312] <= wire_DFFQuotient_d[312:312];
	// synopsys translate_off
	initial
		DFFQuotient[313:313] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[313:313] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[313:313] <= wire_DFFQuotient_d[313:313];
	// synopsys translate_off
	initial
		DFFQuotient[314:314] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[314:314] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[314:314] <= wire_DFFQuotient_d[314:314];
	// synopsys translate_off
	initial
		DFFQuotient[315:315] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[315:315] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[315:315] <= wire_DFFQuotient_d[315:315];
	// synopsys translate_off
	initial
		DFFQuotient[316:316] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[316:316] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[316:316] <= wire_DFFQuotient_d[316:316];
	// synopsys translate_off
	initial
		DFFQuotient[317:317] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[317:317] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[317:317] <= wire_DFFQuotient_d[317:317];
	// synopsys translate_off
	initial
		DFFQuotient[318:318] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[318:318] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[318:318] <= wire_DFFQuotient_d[318:318];
	// synopsys translate_off
	initial
		DFFQuotient[319:319] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[319:319] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[319:319] <= wire_DFFQuotient_d[319:319];
	// synopsys translate_off
	initial
		DFFQuotient[320:320] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[320:320] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[320:320] <= wire_DFFQuotient_d[320:320];
	// synopsys translate_off
	initial
		DFFQuotient[321:321] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[321:321] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[321:321] <= wire_DFFQuotient_d[321:321];
	// synopsys translate_off
	initial
		DFFQuotient[322:322] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[322:322] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[322:322] <= wire_DFFQuotient_d[322:322];
	// synopsys translate_off
	initial
		DFFQuotient[323:323] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[323:323] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[323:323] <= wire_DFFQuotient_d[323:323];
	assign
		wire_DFFQuotient_d = {DFFQuotient[305:289], (~ selnose[323]), DFFQuotient[287:272], (~ selnose[304]), vcc_wire, DFFQuotient[269:255], (~ selnose[285]), {2{vcc_wire}}, DFFQuotient[251:238], (~ selnose[266]), {3{vcc_wire}}, DFFQuotient[233:221], (~ selnose[247]), {4{vcc_wire}}, DFFQuotient[215:204], (~ selnose[228]), {5{vcc_wire}}, DFFQuotient[197:187], (~ selnose[209]), {6{vcc_wire}}, DFFQuotient[179:170], (~ selnose[190]), {7{vcc_wire}}, DFFQuotient[161:153], (~ selnose[171]), {8{vcc_wire}}, DFFQuotient[143:136], (~ selnose[152]), {9{vcc_wire}}, DFFQuotient[125:119], (~ selnose[133]), {10{vcc_wire}}, DFFQuotient[107:102], (~ selnose[114]), {11{vcc_wire}}, DFFQuotient[89:85], (~ selnose[95]), {12{vcc_wire}}, DFFQuotient[71:68], (~ selnose[76]), {13{vcc_wire}}, DFFQuotient[53:51], (~ selnose[57]), {14{vcc_wire}}, DFFQuotient[35:34], (~ selnose[38]), {15{vcc_wire}}, DFFQuotient[17], (~ selnose[19]), {16{vcc_wire}}, (~ selnose[0]), {17{vcc_wire}}};
	// synopsys translate_off
	initial
		DFFStage = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFStage <= 180'b0;
		else if  (clk_en == 1'b1)   DFFStage <= {StageOut[179:0]};
	div18_9_add_sub   add_sub_0
	( 
	.cout(wire_add_sub_0_cout),
	.dataa(NumeratorIn[17]),
	.datab(DenominatorIn[0]),
	.result(wire_add_sub_0_result));
	div18_9_add_sub1   add_sub_1
	( 
	.cout(wire_add_sub_1_cout),
	.dataa({StageIn[10], NumeratorIn[34]}),
	.datab(DenominatorIn[11:10]),
	.result(wire_add_sub_1_result));
	assign
		wire_add_sub_10_result_int = wire_add_sub_10_dataa - wire_add_sub_10_datab;
	assign
		wire_add_sub_10_result = wire_add_sub_10_result_int[9:0],
		wire_add_sub_10_cout = ~wire_add_sub_10_result_int[10:10];
	assign
		wire_add_sub_10_dataa = {StageIn[108:100], NumeratorIn[187]},
		wire_add_sub_10_datab = DenominatorIn[109:100];
	assign
		wire_add_sub_11_result_int = wire_add_sub_11_dataa - wire_add_sub_11_datab;
	assign
		wire_add_sub_11_result = wire_add_sub_11_result_int[9:0],
		wire_add_sub_11_cout = ~wire_add_sub_11_result_int[10:10];
	assign
		wire_add_sub_11_dataa = {StageIn[118:110], NumeratorIn[204]},
		wire_add_sub_11_datab = DenominatorIn[119:110];
	assign
		wire_add_sub_12_result_int = wire_add_sub_12_dataa - wire_add_sub_12_datab;
	assign
		wire_add_sub_12_result = wire_add_sub_12_result_int[9:0],
		wire_add_sub_12_cout = ~wire_add_sub_12_result_int[10:10];
	assign
		wire_add_sub_12_dataa = {StageIn[128:120], NumeratorIn[221]},
		wire_add_sub_12_datab = DenominatorIn[129:120];
	assign
		wire_add_sub_13_result_int = wire_add_sub_13_dataa - wire_add_sub_13_datab;
	assign
		wire_add_sub_13_result = wire_add_sub_13_result_int[9:0],
		wire_add_sub_13_cout = ~wire_add_sub_13_result_int[10:10];
	assign
		wire_add_sub_13_dataa = {StageIn[138:130], NumeratorIn[238]},
		wire_add_sub_13_datab = DenominatorIn[139:130];
	assign
		wire_add_sub_14_result_int = wire_add_sub_14_dataa - wire_add_sub_14_datab;
	assign
		wire_add_sub_14_result = wire_add_sub_14_result_int[9:0],
		wire_add_sub_14_cout = ~wire_add_sub_14_result_int[10:10];
	assign
		wire_add_sub_14_dataa = {StageIn[148:140], NumeratorIn[255]},
		wire_add_sub_14_datab = DenominatorIn[149:140];
	assign
		wire_add_sub_15_result_int = wire_add_sub_15_dataa - wire_add_sub_15_datab;
	assign
		wire_add_sub_15_result = wire_add_sub_15_result_int[9:0],
		wire_add_sub_15_cout = ~wire_add_sub_15_result_int[10:10];
	assign
		wire_add_sub_15_dataa = {StageIn[158:150], NumeratorIn[272]},
		wire_add_sub_15_datab = DenominatorIn[159:150];
	assign
		wire_add_sub_16_result_int = wire_add_sub_16_dataa - wire_add_sub_16_datab;
	assign
		wire_add_sub_16_result = wire_add_sub_16_result_int[9:0],
		wire_add_sub_16_cout = ~wire_add_sub_16_result_int[10:10];
	assign
		wire_add_sub_16_dataa = {StageIn[168:160], NumeratorIn[289]},
		wire_add_sub_16_datab = DenominatorIn[169:160];
	assign
		wire_add_sub_17_result_int = wire_add_sub_17_dataa - wire_add_sub_17_datab;
	assign
		wire_add_sub_17_result = wire_add_sub_17_result_int[9:0],
		wire_add_sub_17_cout = ~wire_add_sub_17_result_int[10:10];
	assign
		wire_add_sub_17_dataa = {StageIn[178:170], NumeratorIn[306]},
		wire_add_sub_17_datab = DenominatorIn[179:170];
	assign
		wire_add_sub_2_result_int = wire_add_sub_2_dataa - wire_add_sub_2_datab;
	assign
		wire_add_sub_2_result = wire_add_sub_2_result_int[2:0],
		wire_add_sub_2_cout = ~wire_add_sub_2_result_int[3:3];
	assign
		wire_add_sub_2_dataa = {StageIn[21:20], NumeratorIn[51]},
		wire_add_sub_2_datab = DenominatorIn[22:20];
	assign
		wire_add_sub_3_result_int = wire_add_sub_3_dataa - wire_add_sub_3_datab;
	assign
		wire_add_sub_3_result = wire_add_sub_3_result_int[3:0],
		wire_add_sub_3_cout = ~wire_add_sub_3_result_int[4:4];
	assign
		wire_add_sub_3_dataa = {StageIn[32:30], NumeratorIn[68]},
		wire_add_sub_3_datab = DenominatorIn[33:30];
	assign
		wire_add_sub_4_result_int = wire_add_sub_4_dataa - wire_add_sub_4_datab;
	assign
		wire_add_sub_4_result = wire_add_sub_4_result_int[4:0],
		wire_add_sub_4_cout = ~wire_add_sub_4_result_int[5:5];
	assign
		wire_add_sub_4_dataa = {StageIn[43:40], NumeratorIn[85]},
		wire_add_sub_4_datab = DenominatorIn[44:40];
	assign
		wire_add_sub_5_result_int = wire_add_sub_5_dataa - wire_add_sub_5_datab;
	assign
		wire_add_sub_5_result = wire_add_sub_5_result_int[5:0],
		wire_add_sub_5_cout = ~wire_add_sub_5_result_int[6:6];
	assign
		wire_add_sub_5_dataa = {StageIn[54:50], NumeratorIn[102]},
		wire_add_sub_5_datab = DenominatorIn[55:50];
	assign
		wire_add_sub_6_result_int = wire_add_sub_6_dataa - wire_add_sub_6_datab;
	assign
		wire_add_sub_6_result = wire_add_sub_6_result_int[6:0],
		wire_add_sub_6_cout = ~wire_add_sub_6_result_int[7:7];
	assign
		wire_add_sub_6_dataa = {StageIn[65:60], NumeratorIn[119]},
		wire_add_sub_6_datab = DenominatorIn[66:60];
	assign
		wire_add_sub_7_result_int = wire_add_sub_7_dataa - wire_add_sub_7_datab;
	assign
		wire_add_sub_7_result = wire_add_sub_7_result_int[7:0],
		wire_add_sub_7_cout = ~wire_add_sub_7_result_int[8:8];
	assign
		wire_add_sub_7_dataa = {StageIn[76:70], NumeratorIn[136]},
		wire_add_sub_7_datab = DenominatorIn[77:70];
	assign
		wire_add_sub_8_result_int = wire_add_sub_8_dataa - wire_add_sub_8_datab;
	assign
		wire_add_sub_8_result = wire_add_sub_8_result_int[8:0],
		wire_add_sub_8_cout = ~wire_add_sub_8_result_int[9:9];
	assign
		wire_add_sub_8_dataa = {StageIn[87:80], NumeratorIn[153]},
		wire_add_sub_8_datab = DenominatorIn[88:80];
	assign
		wire_add_sub_9_result_int = wire_add_sub_9_dataa - wire_add_sub_9_datab;
	assign
		wire_add_sub_9_result = wire_add_sub_9_result_int[9:0],
		wire_add_sub_9_cout = ~wire_add_sub_9_result_int[10:10];
	assign
		wire_add_sub_9_dataa = {StageIn[98:90], NumeratorIn[170]},
		wire_add_sub_9_datab = DenominatorIn[99:90];
	assign
		aclr = 1'b0,
		clk_en = 1'b1,
		DenominatorIn = DenominatorIn_tmp,
		DenominatorIn_tmp = {{gnd_wire, DFFDenominator[161:153]}, {gnd_wire, DFFDenominator[152:144]}, {gnd_wire, DFFDenominator[143:135]}, {gnd_wire, DFFDenominator[134:126]}, {gnd_wire, DFFDenominator[125:117]}, {gnd_wire, DFFDenominator[116:108]}, {gnd_wire, DFFDenominator[107:99]}, {gnd_wire, DFFDenominator[98:90]}, {gnd_wire, DFFDenominator[89:81]}, {gnd_wire, DFFDenominator[80:72]}, {gnd_wire, DFFDenominator[71:63]}, {gnd_wire, DFFDenominator[62:54]}, {gnd_wire, DFFDenominator[53:45]}, {gnd_wire, DFFDenominator[44:36]}, {gnd_wire, DFFDenominator[35:27]}, {gnd_wire, DFFDenominator[26:18]}, {gnd_wire, DFFDenominator[17:9]}, {gnd_wire, DFFDenominator[8:0]}, {gnd_wire, denominator}},
		gnd_wire = 1'b0,
		nose = {{18{1'b0}}, wire_add_sub_17_cout, {18{1'b0}}, wire_add_sub_16_cout, {18{1'b0}}, wire_add_sub_15_cout, {18{1'b0}}, wire_add_sub_14_cout, {18{1'b0}}, wire_add_sub_13_cout, {18{1'b0}}, wire_add_sub_12_cout, {18{1'b0}}, wire_add_sub_11_cout, {18{1'b0}}, wire_add_sub_10_cout, {18{1'b0}}, wire_add_sub_9_cout, {18{1'b0}}, wire_add_sub_8_cout, {18{1'b0}}, wire_add_sub_7_cout, {18{1'b0}}, wire_add_sub_6_cout, {18{1'b0}}, wire_add_sub_5_cout, {18{1'b0}}, wire_add_sub_4_cout, {18{1'b0}}, wire_add_sub_3_cout, {18{1'b0}}, wire_add_sub_2_cout, {18{1'b0}}, wire_add_sub_1_cout, {18{1'b0}}, wire_add_sub_0_cout},
		NumeratorIn = NumeratorIn_tmp,
		NumeratorIn_tmp = {DFFNumerator[323:0], numerator},
		prestg = {wire_add_sub_17_result, wire_add_sub_16_result, wire_add_sub_15_result, wire_add_sub_14_result, wire_add_sub_13_result, wire_add_sub_12_result, wire_add_sub_11_result, wire_add_sub_10_result, wire_add_sub_9_result, {1{1'b0}}, wire_add_sub_8_result, {2{1'b0}}, wire_add_sub_7_result, {3{1'b0}}, wire_add_sub_6_result, {4{1'b0}}, wire_add_sub_5_result, {5{1'b0}}, wire_add_sub_4_result, {6{1'b0}}, wire_add_sub_3_result, {7{1'b0}}, wire_add_sub_2_result, {8{1'b0}}, wire_add_sub_1_result, {9{1'b0}}, wire_add_sub_0_result},
		quotient = quotient_tmp,
		quotient_tmp = {DFFQuotient[323:306]},
		remainder = StageIn[188:180],
		sel = {gnd_wire, (sel[170] | DenominatorIn[188]), (sel[169] | DenominatorIn[187]), (sel[168] | DenominatorIn[186]), (sel[167] | DenominatorIn[185]), (sel[166] | DenominatorIn[184]), (sel[165] | DenominatorIn[183]), (sel[164] | DenominatorIn[182]), (sel[163] | DenominatorIn[181]), gnd_wire, (sel[161] | DenominatorIn[178]), (sel[160] | DenominatorIn[177]), (sel[159] | DenominatorIn[176]), (sel[158] | DenominatorIn[175]), (sel[157] | DenominatorIn[174]), (sel[156] | DenominatorIn[173]), (sel[155] | DenominatorIn[172]), (sel[154] | DenominatorIn[171]), gnd_wire, (sel[152] | DenominatorIn[168]), (sel[151] | DenominatorIn[167]), (sel[150] | DenominatorIn[166]), (sel[149] | DenominatorIn[165]), (sel[148] | DenominatorIn[164]), (sel[147] | DenominatorIn[163]), (sel[146] | DenominatorIn[162]), (sel[145] | DenominatorIn[161]), gnd_wire, (sel[143] | DenominatorIn[158]), (sel[142] | DenominatorIn[157]), (sel[141] | DenominatorIn[156]), (sel[140] | DenominatorIn[155]), (sel[139] | DenominatorIn[154]), (sel[138] | DenominatorIn[153]), (sel[137] | DenominatorIn[152]), (sel[136] | DenominatorIn[151]), gnd_wire, (sel[134] | DenominatorIn[148]), (sel[133] | DenominatorIn[147]), (sel[132] | DenominatorIn[146]), (sel[131] | DenominatorIn[145]), (sel[130] | DenominatorIn[144]), (sel[129] | DenominatorIn[143]), (sel[128] | DenominatorIn[142]), (sel[127] | DenominatorIn[141]), gnd_wire, (sel[125] | DenominatorIn[138]), (sel[124] | DenominatorIn[137]), (sel[123] | DenominatorIn[136]), (sel[122] | DenominatorIn[135]), (sel[121] | DenominatorIn[134]), (sel[120] | DenominatorIn[133]), (sel[119] | DenominatorIn[132]), (sel[118] | DenominatorIn[131]), gnd_wire, (sel[116] | DenominatorIn[128]), (sel[115] | DenominatorIn[127]), (sel[114] | DenominatorIn[126]), (sel[113] | DenominatorIn[125]), (sel[112] | DenominatorIn[124]), (sel[111] | DenominatorIn[123]), (sel[110] | DenominatorIn[122]), (sel[109] | DenominatorIn[121]), gnd_wire, (sel[107] | DenominatorIn[118]), (sel[106] | DenominatorIn[117]), (sel[105] | DenominatorIn[116]), (sel[104] | DenominatorIn[115]
), (sel[103] | DenominatorIn[114]), (sel[102] | DenominatorIn[113]), (sel[101] | DenominatorIn[112]), (sel[100] | DenominatorIn[111]), gnd_wire, (sel[98] | DenominatorIn[108]), (sel[97] | DenominatorIn[107]), (sel[96] | DenominatorIn[106]), (sel[95] | DenominatorIn[105]), (sel[94] | DenominatorIn[104]), (sel[93] | DenominatorIn[103]), (sel[92] | DenominatorIn[102]), (sel[91] | DenominatorIn[101]), gnd_wire, (sel[89] | DenominatorIn[98]), (sel[88] | DenominatorIn[97]), (sel[87] | DenominatorIn[96]), (sel[86] | DenominatorIn[95]), (sel[85] | DenominatorIn[94]), (sel[84] | DenominatorIn[93]), (sel[83] | DenominatorIn[92]), (sel[82] | DenominatorIn[91]), gnd_wire, (sel[80] | DenominatorIn[88]), (sel[79] | DenominatorIn[87]), (sel[78] | DenominatorIn[86]), (sel[77] | DenominatorIn[85]), (sel[76] | DenominatorIn[84]), (sel[75] | DenominatorIn[83]), (sel[74] | DenominatorIn[82]), (sel[73] | DenominatorIn[81]), gnd_wire, (sel[71] | DenominatorIn[78]), (sel[70] | DenominatorIn[77]), (sel[69] | DenominatorIn[76]), (sel[68] | DenominatorIn[75]), (sel[67] | DenominatorIn[74]), (sel[66] | DenominatorIn[73]), (sel[65] | DenominatorIn[72]), (sel[64] | DenominatorIn[71]), gnd_wire, (sel[62] | DenominatorIn[68]), (sel[61] | DenominatorIn[67]), (sel[60] | DenominatorIn[66]), (sel[59] | DenominatorIn[65]), (sel[58] | DenominatorIn[64]), (sel[57] | DenominatorIn[63]), (sel[56] | DenominatorIn[62]), (sel[55] | DenominatorIn[61]), gnd_wire, (sel[53] | DenominatorIn[58]), (sel[52] | DenominatorIn[57]), (sel[51] | DenominatorIn[56]), (sel[50] | DenominatorIn[55]), (sel[49] | DenominatorIn[54]), (sel[48] | DenominatorIn[53]), (sel[47] | DenominatorIn[52]), (sel[46] | DenominatorIn[51]), gnd_wire, (sel[44] | DenominatorIn[48]), (sel[43] | DenominatorIn[47]), (sel[42] | DenominatorIn[46]), (sel[41] | DenominatorIn[45]), (sel[40] | DenominatorIn[44]), (sel[39] | DenominatorIn[43]), (sel[38] | DenominatorIn[42]), (sel[37] | DenominatorIn[41]), gnd_wire, (sel[35] | DenominatorIn[38]), (sel[34] | DenominatorIn[37]), (sel[33] | DenominatorIn[36]
), (sel[32] | DenominatorIn[35]), (sel[31] | DenominatorIn[34]), (sel[30] | DenominatorIn[33]), (sel[29] | DenominatorIn[32]), (sel[28] | DenominatorIn[31]), gnd_wire, (sel[26] | DenominatorIn[28]), (sel[25] | DenominatorIn[27]), (sel[24] | DenominatorIn[26]), (sel[23] | DenominatorIn[25]), (sel[22] | DenominatorIn[24]), (sel[21] | DenominatorIn[23]), (sel[20] | DenominatorIn[22]), (sel[19] | DenominatorIn[21]), gnd_wire, (sel[17] | DenominatorIn[18]), (sel[16] | DenominatorIn[17]), (sel[15] | DenominatorIn[16]), (sel[14] | DenominatorIn[15]), (sel[13] | DenominatorIn[14]), (sel[12] | DenominatorIn[13]), (sel[11] | DenominatorIn[12]), (sel[10] | DenominatorIn[11]), gnd_wire, (sel[8] | DenominatorIn[8]), (sel[7] | DenominatorIn[7]), (sel[6] | DenominatorIn[6]), (sel[5] | DenominatorIn[5]), (sel[4] | DenominatorIn[4]), (sel[3] | DenominatorIn[3]), (sel[2] | DenominatorIn[2]), (sel[1] | DenominatorIn[1])},
		selnose = {(~ nose[341]), (~ nose[340]), (~ nose[339]), (~ nose[338]), (~ nose[337]), (~ nose[336]), (~ nose[335]), (~ nose[334]), (~ nose[333]), ((~ nose[332]) | sel[170]), ((~ nose[331]) | sel[169]), ((~ nose[330]) | sel[168]), ((~ nose[329]) | sel[167]), ((~ nose[328]) | sel[166]), ((~ nose[327]) | sel[165]), ((~ nose[326]) | sel[164]), ((~ nose[325]) | sel[163]), ((~ nose[324]) | sel[162]), (~ nose[323]), (~ nose[322]), (~ nose[321]), (~ nose[320]), (~ nose[319]), (~ nose[318]), (~ nose[317]), (~ nose[316]), (~ nose[315]), ((~ nose[314]) | sel[161]), ((~ nose[313]) | sel[160]), ((~ nose[312]) | sel[159]), ((~ nose[311]) | sel[158]), ((~ nose[310]) | sel[157]), ((~ nose[309]) | sel[156]), ((~ nose[308]) | sel[155]), ((~ nose[307]) | sel[154]), ((~ nose[306]) | sel[153]), (~ nose[305]), (~ nose[304]), (~ nose[303]), (~ nose[302]), (~ nose[301]), (~ nose[300]), (~ nose[299]), (~ nose[298]), (~ nose[297]), ((~ nose[296]) | sel[152]), ((~ nose[295]) | sel[151]), ((~ nose[294]) | sel[150]), ((~ nose[293]) | sel[149]), ((~ nose[292]) | sel[148]), ((~ nose[291]) | sel[147]), ((~ nose[290]) | sel[146]), ((~ nose[289]) | sel[145]), ((~ nose[288]) | sel[144]), (~ nose[287]), (~ nose[286]), (~ nose[285]), (~ nose[284]), (~ nose[283]), (~ nose[282]), (~ nose[281]), (~ nose[280]), (~ nose[279]), ((~ nose[278]) | sel[143]), ((~ nose[277]) | sel[142]), ((~ nose[276]) | sel[141]), ((~ nose[275]) | sel[140]), ((~ nose[274]) | sel[139]), ((~ nose[273]) | sel[138]), ((~ nose[272]) | sel[137]), ((~ nose[271]) | sel[136]), ((~ nose[270]) | sel[135]), (~ nose[269]), (~ nose[268]), (~ nose[267]), (~ nose[266]), (~ nose[265]), (~ nose[264]), (~ nose[263]), (~ nose[262]), (~ nose[261]), ((~ nose[260]) | sel[134]), ((~ nose[259]) | sel[133]), ((~ nose[258]) | sel[132]), ((~ nose[257]) | sel[131]), ((~ nose[256]) | sel[130]), ((~ nose[255]) | sel[129]), ((~ nose[254]) | sel[128]), ((~ nose[253]) | sel[127]), ((~ nose[252]) | sel[126]), (~ nose[251]), (~ nose[250]), (~ nose[249]), (~ nose[248]), (~ nose[247]), (~ nose[246]), (~ nose[245]
), (~ nose[244]), (~ nose[243]), ((~ nose[242]) | sel[125]), ((~ nose[241]) | sel[124]), ((~ nose[240]) | sel[123]), ((~ nose[239]) | sel[122]), ((~ nose[238]) | sel[121]), ((~ nose[237]) | sel[120]), ((~ nose[236]) | sel[119]), ((~ nose[235]) | sel[118]), ((~ nose[234]) | sel[117]), (~ nose[233]), (~ nose[232]), (~ nose[231]), (~ nose[230]), (~ nose[229]), (~ nose[228]), (~ nose[227]), (~ nose[226]), (~ nose[225]), ((~ nose[224]) | sel[116]), ((~ nose[223]) | sel[115]), ((~ nose[222]) | sel[114]), ((~ nose[221]) | sel[113]), ((~ nose[220]) | sel[112]), ((~ nose[219]) | sel[111]), ((~ nose[218]) | sel[110]), ((~ nose[217]) | sel[109]), ((~ nose[216]) | sel[108]), (~ nose[215]), (~ nose[214]), (~ nose[213]), (~ nose[212]), (~ nose[211]), (~ nose[210]), (~ nose[209]), (~ nose[208]), (~ nose[207]), ((~ nose[206]) | sel[107]), ((~ nose[205]) | sel[106]), ((~ nose[204]) | sel[105]), ((~ nose[203]) | sel[104]), ((~ nose[202]) | sel[103]), ((~ nose[201]) | sel[102]), ((~ nose[200]) | sel[101]), ((~ nose[199]) | sel[100]), ((~ nose[198]) | sel[99]), (~ nose[197]), (~ nose[196]), (~ nose[195]), (~ nose[194]), (~ nose[193]), (~ nose[192]), (~ nose[191]), (~ nose[190]), (~ nose[189]), ((~ nose[188]) | sel[98]), ((~ nose[187]) | sel[97]), ((~ nose[186]) | sel[96]), ((~ nose[185]) | sel[95]), ((~ nose[184]) | sel[94]), ((~ nose[183]) | sel[93]), ((~ nose[182]) | sel[92]), ((~ nose[181]) | sel[91]), ((~ nose[180]) | sel[90]), (~ nose[179]), (~ nose[178]), (~ nose[177]), (~ nose[176]), (~ nose[175]), (~ nose[174]), (~ nose[173]), (~ nose[172]), (~ nose[171]), ((~ nose[170]) | sel[89]), ((~ nose[169]) | sel[88]), ((~ nose[168]) | sel[87]), ((~ nose[167]) | sel[86]), ((~ nose[166]) | sel[85]), ((~ nose[165]) | sel[84]), ((~ nose[164]) | sel[83]), ((~ nose[163]) | sel[82]), ((~ nose[162]) | sel[81]), (~ nose[161]), (~ nose[160]), (~ nose[159]), (~ nose[158]), (~ nose[157]), (~ nose[156]), (~ nose[155]), (~ nose[154]), (~ nose[153]), ((~ nose[152]) | sel[80]), ((~ nose[151]) | sel[79]), ((~ nose[150]) | sel[78]), ((~ nose[149]) | sel[77]
), ((~ nose[148]) | sel[76]), ((~ nose[147]) | sel[75]), ((~ nose[146]) | sel[74]), ((~ nose[145]) | sel[73]), ((~ nose[144]) | sel[72]), (~ nose[143]), (~ nose[142]), (~ nose[141]), (~ nose[140]), (~ nose[139]), (~ nose[138]), (~ nose[137]), (~ nose[136]), (~ nose[135]), ((~ nose[134]) | sel[71]), ((~ nose[133]) | sel[70]), ((~ nose[132]) | sel[69]), ((~ nose[131]) | sel[68]), ((~ nose[130]) | sel[67]), ((~ nose[129]) | sel[66]), ((~ nose[128]) | sel[65]), ((~ nose[127]) | sel[64]), ((~ nose[126]) | sel[63]), (~ nose[125]), (~ nose[124]), (~ nose[123]), (~ nose[122]), (~ nose[121]), (~ nose[120]), (~ nose[119]), (~ nose[118]), (~ nose[117]), ((~ nose[116]) | sel[62]), ((~ nose[115]) | sel[61]), ((~ nose[114]) | sel[60]), ((~ nose[113]) | sel[59]), ((~ nose[112]) | sel[58]), ((~ nose[111]) | sel[57]), ((~ nose[110]) | sel[56]), ((~ nose[109]) | sel[55]), ((~ nose[108]) | sel[54]), (~ nose[107]), (~ nose[106]), (~ nose[105]), (~ nose[104]), (~ nose[103]), (~ nose[102]), (~ nose[101]), (~ nose[100]), (~ nose[99]), ((~ nose[98]) | sel[53]), ((~ nose[97]) | sel[52]), ((~ nose[96]) | sel[51]), ((~ nose[95]) | sel[50]), ((~ nose[94]) | sel[49]), ((~ nose[93]) | sel[48]), ((~ nose[92]) | sel[47]), ((~ nose[91]) | sel[46]), ((~ nose[90]) | sel[45]), (~ nose[89]), (~ nose[88]), (~ nose[87]), (~ nose[86]), (~ nose[85]), (~ nose[84]), (~ nose[83]), (~ nose[82]), (~ nose[81]), ((~ nose[80]) | sel[44]), ((~ nose[79]) | sel[43]), ((~ nose[78]) | sel[42]), ((~ nose[77]) | sel[41]), ((~ nose[76]) | sel[40]), ((~ nose[75]) | sel[39]), ((~ nose[74]) | sel[38]), ((~ nose[73]) | sel[37]), ((~ nose[72]) | sel[36]), (~ nose[71]), (~ nose[70]), (~ nose[69]), (~ nose[68]), (~ nose[67]), (~ nose[66]), (~ nose[65]), (~ nose[64]), (~ nose[63]), ((~ nose[62]) | sel[35]), ((~ nose[61]) | sel[34]), ((~ nose[60]) | sel[33]), ((~ nose[59]) | sel[32]), ((~ nose[58]) | sel[31]), ((~ nose[57]) | sel[30]), ((~ nose[56]) | sel[29]), ((~ nose[55]) | sel[28]), ((~ nose[54]) | sel[27]), (~ nose[53]), (~ nose[52]), (~ nose[51]), (~ nose[50]), (~ nose[49]
), (~ nose[48]), (~ nose[47]), (~ nose[46]), (~ nose[45]), ((~ nose[44]) | sel[26]), ((~ nose[43]) | sel[25]), ((~ nose[42]) | sel[24]), ((~ nose[41]) | sel[23]), ((~ nose[40]) | sel[22]), ((~ nose[39]) | sel[21]), ((~ nose[38]) | sel[20]), ((~ nose[37]) | sel[19]), ((~ nose[36]) | sel[18]), (~ nose[35]), (~ nose[34]), (~ nose[33]), (~ nose[32]), (~ nose[31]), (~ nose[30]), (~ nose[29]), (~ nose[28]), (~ nose[27]), ((~ nose[26]) | sel[17]), ((~ nose[25]) | sel[16]), ((~ nose[24]) | sel[15]), ((~ nose[23]) | sel[14]), ((~ nose[22]) | sel[13]), ((~ nose[21]) | sel[12]), ((~ nose[20]) | sel[11]), ((~ nose[19]) | sel[10]), ((~ nose[18]) | sel[9]), (~ nose[17]), (~ nose[16]), (~ nose[15]), (~ nose[14]), (~ nose[13]), (~ nose[12]), (~ nose[11]), (~ nose[10]), (~ nose[9]), ((~ nose[8]) | sel[8]), ((~ nose[7]) | sel[7]), ((~ nose[6]) | sel[6]), ((~ nose[5]) | sel[5]), ((~ nose[4]) | sel[4]), ((~ nose[3]) | sel[3]), ((~ nose[2]) | sel[2]), ((~ nose[1]) | sel[1]), ((~ nose[0]) | sel[0])},
		StageIn = StageIn_tmp,
		StageIn_tmp = {DFFStage[179:0], {10{1'b0}}},
		StageOut = {(({StageIn[178:170], NumeratorIn[306]} & {10{selnose[323]}}) | (prestg[179:170] & {10{(~ selnose[323])}})), (({StageIn[168:160], NumeratorIn[289]} & {10{selnose[304]}}) | (prestg[169:160] & {10{(~ selnose[304])}})), (({StageIn[158:150], NumeratorIn[272]} & {10{selnose[285]}}) | (prestg[159:150] & {10{(~ selnose[285])}})), (({StageIn[148:140], NumeratorIn[255]} & {10{selnose[266]}}) | (prestg[149:140] & {10{(~ selnose[266])}})), (({StageIn[138:130], NumeratorIn[238]} & {10{selnose[247]}}) | (prestg[139:130] & {10{(~ selnose[247])}})), (({StageIn[128:120], NumeratorIn[221]} & {10{selnose[228]}}) | (prestg[129:120] & {10{(~ selnose[228])}})), (({StageIn[118:110], NumeratorIn[204]} & {10{selnose[209]}}) | (prestg[119:110] & {10{(~ selnose[209])}})), (({StageIn[108:100], NumeratorIn[187]} & {10{selnose[190]}}) | (prestg[109:100] & {10{(~ selnose[190])}})), (({StageIn[98:90], NumeratorIn[170]} & {10{selnose[171]}}) | (prestg[99:90] & {10{(~ selnose[171])}})), (({StageIn[88:80], NumeratorIn[153]} & {10{selnose[152]}}) | (prestg[89:80] & {10{(~ selnose[152])}})), (({StageIn[78:70], NumeratorIn[136]} & {10{selnose[133]}}) | (prestg[79:70] & {10{(~ selnose[133])}})), (({StageIn[68:60], NumeratorIn[119]} & {10{selnose[114]}}) | (prestg[69:60] & {10{(~ selnose[114])}})), (({StageIn[58:50], NumeratorIn[102]} & {10{selnose[95]}}) | (prestg[59:50] & {10{(~ selnose[95])}})), (({StageIn[48:40], NumeratorIn[85]} & {10{selnose[76]}}) | (prestg[49:40] & {10{(~ selnose[76])}})), (({StageIn[38:30], NumeratorIn[68]} & {10{selnose[57]}}) | (prestg[39:30] & {10{(~ selnose[57])}})), (({StageIn[28:20], NumeratorIn[51]} & {10{selnose[38]}}) | (prestg[29:20] & {10{(~ selnose[38])}})), (({StageIn[18:10], NumeratorIn[34]} & {10{selnose[19]}}) | (prestg[19:10] & {10{(~ selnose[19])}})), (({StageIn[8:0], NumeratorIn[17]} & {10{selnose[0]}}) | (prestg[9:0] & {10{(~ selnose[0])}}))},
		vcc_wire = 1'b1;
endmodule //div18_9_alt_u_div

//synthesis_resources = lut 148 reg 990 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  div18_9_sign_div_unsign
	( 
	clock,
	denominator,
	numerator,
	quotient,
	remainder) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   [8:0]  denominator;
	input   [17:0]  numerator;
	output   [17:0]  quotient;
	output   [8:0]  remainder;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [17:0]   wire_divider_quotient;
	wire  [8:0]   wire_divider_remainder;
	wire  [17:0]  norm_num;
	wire  [17:0]  protect_quotient;
	wire  [8:0]  protect_remainder;

	div18_9_alt_u_div   divider
	( 
	.clock(clock),
	.denominator(denominator),
	.numerator(norm_num),
	.quotient(wire_divider_quotient),
	.remainder(wire_divider_remainder));
	assign
		norm_num = numerator,
		protect_quotient = wire_divider_quotient,
		protect_remainder = wire_divider_remainder,
		quotient = protect_quotient,
		remainder = protect_remainder;
endmodule //div18_9_sign_div_unsign

//synthesis_resources = lut 148 reg 990 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  div18_9_lpm_divide
	( 
	clock,
	denom,
	numer,
	quotient,
	remain) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   [8:0]  denom;
	input   [17:0]  numer;
	output   [17:0]  quotient;
	output   [8:0]  remain;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [17:0]   wire_divider_quotient;
	wire  [8:0]   wire_divider_remainder;
	wire  [17:0]  numer_tmp;

	div18_9_sign_div_unsign   divider
	( 
	.clock(clock),
	.denominator(denom),
	.numerator(numer_tmp),
	.quotient(wire_divider_quotient),
	.remainder(wire_divider_remainder));
	assign
		numer_tmp = numer,
		quotient = wire_divider_quotient,
		remain = wire_divider_remainder;
endmodule //div18_9_lpm_divide
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module div18_9 (
	clock,
	denom,
	numer,
	quotient,
	remain)/* synthesis synthesis_clearbox = 1 */;

	input	  clock;
	input	[8:0]  denom;
	input	[17:0]  numer;
	output	[17:0]  quotient;
	output	[8:0]  remain;

	wire [17:0] sub_wire0;
	wire [8:0] sub_wire1;
	wire [17:0] quotient = sub_wire0[17:0];
	wire [8:0] remain = sub_wire1[8:0];

	div18_9_lpm_divide	div18_9_lpm_divide_component (
				.clock (clock),
				.denom (denom),
				.numer (numer),
				.quotient (sub_wire0),
				.remain (sub_wire1));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Cyclone IV E"
// Retrieval info: PRIVATE: PRIVATE_LPM_REMAINDERPOSITIVE STRING "TRUE"
// Retrieval info: PRIVATE: PRIVATE_MAXIMIZE_SPEED NUMERIC "-1"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "1"
// Retrieval info: PRIVATE: USING_PIPELINE NUMERIC "1"
// Retrieval info: PRIVATE: VERSION_NUMBER NUMERIC "2"
// Retrieval info: PRIVATE: new_diagram STRING "1"
// Retrieval info: LIBRARY: lpm lpm.lpm_components.all
// Retrieval info: CONSTANT: LPM_DREPRESENTATION STRING "UNSIGNED"
// Retrieval info: CONSTANT: LPM_HINT STRING "LPM_REMAINDERPOSITIVE=TRUE"
// Retrieval info: CONSTANT: LPM_NREPRESENTATION STRING "UNSIGNED"
// Retrieval info: CONSTANT: LPM_PIPELINE NUMERIC "18"
// Retrieval info: CONSTANT: LPM_TYPE STRING "LPM_DIVIDE"
// Retrieval info: CONSTANT: LPM_WIDTHD NUMERIC "9"
// Retrieval info: CONSTANT: LPM_WIDTHN NUMERIC "18"
// Retrieval info: USED_PORT: clock 0 0 0 0 INPUT NODEFVAL "clock"
// Retrieval info: USED_PORT: denom 0 0 9 0 INPUT NODEFVAL "denom[8..0]"
// Retrieval info: USED_PORT: numer 0 0 18 0 INPUT NODEFVAL "numer[17..0]"
// Retrieval info: USED_PORT: quotient 0 0 18 0 OUTPUT NODEFVAL "quotient[17..0]"
// Retrieval info: USED_PORT: remain 0 0 9 0 OUTPUT NODEFVAL "remain[8..0]"
// Retrieval info: CONNECT: @clock 0 0 0 0 clock 0 0 0 0
// Retrieval info: CONNECT: @denom 0 0 9 0 denom 0 0 9 0
// Retrieval info: CONNECT: @numer 0 0 18 0 numer 0 0 18 0
// Retrieval info: CONNECT: quotient 0 0 18 0 @quotient 0 0 18 0
// Retrieval info: CONNECT: remain 0 0 9 0 @remain 0 0 9 0
// Retrieval info: GEN_FILE: TYPE_NORMAL div18_9.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL div18_9.inc FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL div18_9.cmp FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL div18_9.bsf FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL div18_9_inst.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL div18_9_bb.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL div18_9_syn.v TRUE
// Retrieval info: LIB_FILE: lpm
